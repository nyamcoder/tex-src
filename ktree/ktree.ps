%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: ktree.dvi
%%CreationDate: Sun Feb 02 01:28:30 2014
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Umj10 Umj14 CMR10 Umj11 Umj13 Umj12 Umj15 CMR9 CMBX9
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips ktree
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2014.02.02:0128
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.17, 2013/07/08
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 

  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 801 2013-07-09 18:10:41Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 713 2012-10-16 14:25:00Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.03, 2012/10/16
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { 
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get 32 ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ rightTrim psStringwidth } bind def

%/show { rightTrim psShow } bind def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 805 2013-07-11 13:18:11Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.14, 2012/09/18.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def

/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMBX9
%!PS-AdobeFont-1.0: CMBX9 003.002
%%Title: CMBX9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX9 known{/CMBX9 findfont dup/UniqueID known{dup
/UniqueID get 5000767 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX9 def
/FontBBox {-58 -250 1195 750 }readonly def
/UniqueID 5000767 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX9.) readonly def
/FullName (CMBX9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D4347EE3E5AFBE73BA
31023D79A7299D8F662042A8D8B6A7B4E86F48AE98EF848E83FFDE68E17A0832
A181C126D15EC79861796F03957F5A51462C817DF752097718413D012D19C9D4
423A5EAE1EFD4EA7A9651BAE6E45CC194BDCD03FF43F255E58EB5E50CA26BB98
B8B11E21DBFF2BBB04D039E63C453EEDFCD9378F5E7AAE3A93E8691DED5865B2
B78F540F8AA3224BE372B18904651D057608DE4DD729FAC398A80CB904410451
90D66C44E943517A8F4969673B985D9D244FFC743E0AEE309EFD224F7029D37A
F6EDD96E2F88C9D071FF16EDF055955D31DEF10808B343E948BB4F6393D275D0
44C4DABB75332DD716E8127283E8D70511F8EAF4D1A5F72E2F8503A2F964E5F9
39304CC17ACCF531A8C0B6A9D58DBA6F24A4ECA62EECC939E8111E4BF79BDF77
D656F9998F1EFD2ECE3E61CA526106662273D5AD3E74D08E9D4453569B359C2B
E2455F2136B4DB54ADDC3C0256EB7A11E1615AB9323ECCBB6EB48ACD469A2020
A873E88B28AEAACAA01826C1C18120774FD5324DF9AD36FC256706DB24FEDF34
0FCDF04B12ADB66876EC7AEC183A1EA8BABD38BADDCD0EBDE11A5A1BEADD0F7B
83585C3BA141A8B296872F712EC42C625DBEE9EBD2C414E57CC1378CAEFD00E8
DB4B84F51967F2968329B8503C4B37A56F6136DA89167FE3AAA93257140FE94D
D96C7F85C6F82AE1596511ADFEFDEBC1B41B0395E66D2074B39B5565AD4687FC
89BB4BAFF0F7568D9EAF069CCBA2DFF61C59E2CB2F4274459792C5D097FDE6DE
0E40AAD8DD8F64C28D04EE50AB79EA7D3420CE42D39FA9080E9E046A4F22B5AE
AAA17FE750BFAF7BFF097E4A6E9362412C55E25767C311832C1C0C76005C733F
E046FCFD4CF49C6181C24BD299E90F20A0A0ADC868C11A8AB7F610186D0483A1
B3BC4FAFFFE12FD746777209B4DCEF0E4ED15D90F19BF2FB2B56231FFDE5D40B
146E3FAEDDBAB365D88CED98629B9855AD6E57FB01BB82659BD320D248E5F7D7
B584DD43E1F5DD2C91945DDB772E5A62AEB7080AF36A83D2BA8533E7E6FD287A
924F616F8090E9FFAA607A21F38718D668FBD6BA3434500BD01EDCEC00354F68
E1D0E9A921DACFB83FB61C1A5C27D027CAB348C4B7E2781013B68CC5A2BC8703
2809A49A0C2E9E004D56844EFAB4A8763B103CF7CFF980C9CF7F6BE28814CBDC
348E2486D9379DFFCC0E9329854D518B49B98F582972B0D1D18A3319EC00DDF2
F64C2CD2DCDBA287B279F98D16ABD1D140246E8B66C759571981FE7402F14C94
18394A4C426AEE4B0688D86D08B408763DA3537E5BA0D6A6796C316FDB0193E6
77C6F257BEDDE17F2CA5E661F434964BAC9834BFF36F563637872FCDDE94CF22
F076D1C2DF6357D8A26D305D52C9086CE36F49CD92ADFB4306705A0887407C9D
59B6BFDB82379111C9E33692BA9E2ED9782CE4334C6125933A2F210684642DF5
3B129F955BADA1E86D6B80CE299FA0D1C0AED1AD61686AF1052A188881E2125C
98083BA8255B92B9CA0B48EB57F936790DEFA6E6947C0FF4083FEC296FF3034D
AD657C64F2675EED2B4EED1E88F0B1338762CB4C64C79F111CDE9777A000F65A
F9979943ED7C445815BB59052B91F0FEF7219E3DF27E1D5155B9C42B7BBB06EB
1815997FC3471CF963A15B1C5E4653C84236CC5BF55A31B94E394C635B95D847
69E8134F4FFEAE836CD6AE71F58F48AA2F95BDB1E2CB89DEE590EFF3AB7097DF
AC185303E647628F5D87E0D82E6685DB467A0F8B7D3AB2B7F3F11BCC99BD48A6
FA5D4D75698454CB74451B486CDA6B65547C0CBAA563EC3574364540AE7B11B8
F9E86BFA655CDE88DE2E7D41851FD208649E9C011E04C78ED9209FD56E2447BC
E1AAA0A3D36F6406C60F6B19347CCB7D56A84D961E17E361F92C5542109D9BFC
FEA2FF9775230EABE3333EB25A40E29016E9A8255713AC8336B8F7DEB89FEFEF
4006DAAEA26C6BA1EF494AB99C2BC960D9E07981BABE909B5C121F2CAD48C938
A36129D10D38AE8F5C64879F61138FA9F7479341F5C5DE86376B65A642B9622B
E58DBBFAFE07EEE1D11DE9DC34309572868586CD92D39FADB711883AA85210E5
C82842EF225E55370FE0AC600A170687C60C8091B0625A1C5589186F3C7C1218
B15B5CC3A5CDBA7085338D963D929A18A651EC7CC39B8500899DE9220A1BA363
78698E414607C34E06E29AC5BCBAB98A70DC2BDE0FDDCCE22D4717EDA7D95397
33420EDEC2F1D6E7072FEA85945378A6BE9C7F68DB4FDA6B5BBC0032B3C02519
F4168C804B6A101AA60EF4FC40C2428AFEEF5A80F9B76D561C8A21B3633E13C5
215A14D54B8A1E6143A9CA0B5794D20DF97C35B3C9E9A4673AC2123E7DD8E216
044269B1D6AEEA46757F8D9AC5C8A92BDC1EF22EE0575C80CA7895722CDD2BA6
F9A208E6BEE5319E63B3B3CA197D9739A4498AAAC9C7484D61418ED2BEBF63A7
F5283A075D1DFD4B2702E1551A0D1A90DBBBEFB6A55B5F29C869763A856C4E61
EEB3C8E14E3376B7D01A4E265C6C8056ED23931DCF669A0EC9427F74A147AD8E
82E172FA6C13DB1281651BF3D14163D963EFC7384BFC4B3B9274274DCEF647FD
D6DF0CC146BE8AA660D709526B394CE253369281FDB45AE071319E8FAE4EDF10
2867A431E22779EE40D885E95AFBF62916D9900016805D004C0375D29130CA14
F3E466AF350D1A5D181816EE1C4BC75DC09E4195DADA5AB09CE9EF2C4D5F7CEC
6C16BB6EC791E2870DB46B6B06DF421E7A2781D82A07D92316B553D068A1DF5A
8B19041F96ED637B932DE184F8B856FE1947F5FC8AE505F0E3953B325E0FD6FA
825EAD072AF06E258BD35607A1F082DFBC2BA5251DEDCAF68B4D03086CCF84BC
DF70BB8D2EEEE3E0EAEACC8440AA130273E5C7E78A15EEF66A9A1E0D5E022188
0AFA50FA55C6C461C743E1845FED77378D639839F548D6827CF371AD3DFCE592
B7F6E29FFEB6CB92B33E24E34875A5A92C08806F67E18AEAD86447A977890AE2
30A452F33B609DE5B792D9CABF39A086C0936AECC081CBBC810B3EE1D35F9717
260E76132661E3A8170759084AFAB04A6E773E9714A6D486E0BF46F336A7CDB5
C325E28E747295CB0E8FFB289F4907BAEC213D4D0B495A246A3DC359B995E9C0
C5322D750E13159B7242E4C4DD27932AAA130BC6B0400428B5E6F928CB8F7658
EF02F7522779CDBB67722E09774C419489192FDAD3DF272C95BD9BD64DDF0BDE
999FC72607F52805DCCA5EC17150EEE38B866E3D5199E5A6CC262785EEB11D51
80E79545DA191071487EF70C7FAC0CA345955F797912C1268924DD79D0FCA3BA
460F43E74975C04296E34423BD366A4EF7EE9463ECEF08F7E7BC8BEC570F812B
066383C2EF5375FB1504537D902818D63B30385421FF81AD92A1C153852B1427
A39685A76DD636DC4ADCC53F2A78F795F48EFB23807E5751023FE324CB401281
60F8A8DA779A245DBC26E73B61A1450F25AC276E1B5240578E85E1CDF5A784F7
D4F5BAFA76F70300972E4B130C685189C4010B9035A5CBF0562EB3B387FD89F5
C53A25D3E883B506E0B477389DA5CFA82CB157D8C30F287678B0F9A17F5A8704
ACB5DC57D7CAD21A4EBA49248F277F929D3E49B17463EA5F31A4FC11B0836E34
3A5FDDC6B9A45113590F114B99566D18C21464E7FC1D9AAA9B1133E5E8E2D14B
8E143E1E16595C42376694A83684E3B217A17F158DE89549ECCCB443701B520B
E20B972CA5EC6405C479C5054663D48A22D105AC98AF094340B5964D0C26D9CE
241D2706D3444C1405B2C9F7C912CDFC87EE8FBA01C0020D1AED1A6205A8A45F
8504B42431DB5409BA8AC472F2FCB4CE698F6DA92C4C8BF1293C2C998B771540
3D933EB5E976B7D2252DAE9584E5C6864B29C3048EE159BCB7638CA956E07F81
F76391380AAD2F1DC2DC201BAC657A1BC93F5569A5F612A4EB6B01F136F41B87
E20D4DD6ABD7ACF1275FD80D9BBB87A45572979BDFEF59212F1F6D9423FEC976
1228499D626A328569B4BA2755B1ACD20796398AEEC5F3C61122D52124996535
D0813227F549FCF59C6182D6514A70F9E38565C8C98D5F797318FB531B5DA58E
EC60235B6F1D97CA5D495CF689C3F9B3260998ADA1204AC00135C7C72700DB00
7C06798A46E897875BE619508DFA2201FDCF689E51C3D85342247B059C0DDA14
766A31E3E25E792F090DF3EA0C45C3F64AFB918BDFF92FF0ADA2F71866CA190B
87B2FF90C872284652619F084E2259F044E2980101A62004AE9F4BBF675C5279
BA3437ADDF2D552A033D2301A669EE8BBC840C0028275D077B8E9977D447B396
F1D82608E030FA43511BA01C345078986B8C35B6C6990D018C2DD2CBC7774450
D8482DBB262BB816E6A26A1FEB084FC2027C62D17790C80C65A9183F23BB2458
34FDC5D566C1B667EE801D0521BBA520A15C0C923EDAD84AD6A83DB23806711B
0AC2631C15EB1D33C26F8D65852EC37A3479152557366929A63B753226059870
45CE6403CA23FF95BCFB6F0C8DF8CAFCC0BF27C59414217CC6552F5945D9E6DA
AF83F4AB1917742F7502B069DE44A6ED3BEC966F59A84FAA2F8DE441C11FB122
DEF1768D250C0CA5F2DDE6FC4E24FD3AE4386B91ED2A492A959BF7E4C0AABEAA
5BC2D933147A4A21FC5E5CF3B2AF5C0A768A8B79337FA3934A43E24F9F7DF24D
22C5BFE4DF1FD57289A6E1C9AA48D32D20F613AE94B4308E0D3BE4D1BC95B33E
A9911B82EFF461D295C5462EE2B12A3E40B89E0BC778FB76F8B847B6AA99E061
3444A55D83FF839B926985B0F4E562D726FD99C5DC86DA24BA7AF38B93C90F51
A937E7C35793010F351594465B39BA5276F223DD3CAE1868B969D8EC93AA50C1
4C7E51D0D7F5E9F0EDBE1BE24BA5A977163BEC724D575749C56C4F39BD60F3AC
47B930C9E07A2D59642C9DE85EA6FAD1E7D8817812C049FDAEE148E8AB207B89
B2324191F1A82A7C499E7BF09CF1299F0ECF55EB0A2A32C5BB89411B4AF2A401
074718859CDC27C2FA78BC5269D5A38DBCAE55F6CB669DEED2C36E5B0D590504
B6162391FACA9F20224E6AD24B86CCAC0048EC7A618B3263F82A317B3969F0FA
9D5EA4676B27F371785FFF6599B61A6D32E82DD9D511B04E03F14C95A4CA6CD9
5B59A8A7BFB2AE32E9357C7766528E9F74BB8D0B9317F02EDACE2033B7918D6B
8616F1C1B3E113B0F77B0A1292E41F8353DB55EBD872290491AE1FBE95EC034F
DAC1394928930EE297693598D97EBD0720A0A7B4A5DF4EF4BE0E2E0968E64CB8
167CA1B8C40A779023AB6F74E0F1626D8BFFA96EA09CA88524837B18DA6152A4
3F0DC3C3958EFFF86B07581B416720FADFFC4AD35F1553A18944A6DB8FAB0AE0
A8118C09DC8E905CA32904B44E0541FCC7EE555335E61108D8346B4EF697DE67
7F67E1E4CF0EE2F6D89D10FF2D115C6F8163B8180378018F58C148EAD188E969
C60B83C7B295F30614B93FF925BBB2974B0B9C68C2BBA6E973DBFB5500A574A4
F7348BD31C735A1E57519990582D8F7D97F8B63D9DCD488DC569D5B392FF26FE
F06F9762956D64E9C258EB9B90733BAA8F1912F3B9AE88C6D14DB46B7131BCBB
D47CE60D9C63FE0B9620D03F615EEDAA3C76A7285F9897A0D476F35F5CC158D2
D148CA1E5A96D16253B360F34336D476FABE9A434AAD5FCF65A27F48C5BC3519
DCBC35DC1D324A270996B8DEC6D3833E76A434E05074C7E3FC8E5633D6B25B7D
69D9BF7039DE4E755A7E3BEC8A4E5929A98FE265E742B269666C75644E53E6A4
C5AC907F7DEB319BC88CD1A7F29A0A4D43D471892A674D50C70BB6EFE5740F97
50522F2EF056E208C0134EAF15DC9F85C7C06066782B715A5EBC22AD414A169D
86A2F606150B6F903D3AAAF44E75649DC410C3B8C845909BFC8235E573A2D291
19440D724C960014917EC802414651E298160EA70FD54BE4EAA1A1007ABDA8B6
085A89221C3DD5E9C759C19BAD6EFB91360CFDEE6C4876AC19B4BF67A38BBD5E
0BA20996BEFC1F8C427EBDD666B30DF5A2389F1F3BCA17132FEFFD3231570AD2
61CB33381A0D2E2FDFF470FAC3A60E61E99C76A3F4A6BF32FD4B2B6DB6B27F2A
76A5C35E24E78F7DF28AE1B7D04A71097881CB67E060DE537C1A318B95964FAA
1455264E48DAC7689EF10905E381C569DD65825089EF325595388FA5BA6A1EA2
E2536872DE92D46AF3BB3F1DD920FBAA4481034DF831FD15C01798AB04A73B50
1461BA7298B2EAD460D6E645A9ED41EE0E0282C335AA716D7563AD7CFE2841B7
0C782ED3F6D31871350A12A41AEFE21E9A03DF676671E4C953E51F801CBEE091
BE0B7B413B7EA2479E2529DE9E49C03CBE8159DB1B28D2E290826B6D01B35DDD
083F85E9CAE378C1A3B7065280D9FFEB04A02B76F1F0E547328F005CBD39936A
5063812D1C958FD4EA6BE9FF87E5FAAD483055819D1DC39D31B8417B44F30B50
EC95E26103A0DC2241B56DC62D424438A5FDBA8AD4D9B417F0DC31CD82DD772E
FEA23036A719927A4654876985FF4AC2D28A180969A76F3584D001A2EFAA2BB3
7F0CC228CAD9A485F3FEE3E0F0059D3BD8484FB97593A6EF08F9D352E3860613
2617ED6138ABE551DBC67F0151D0F9CD83A613C245E23FEE6FCC8858592AB43F
8E66FDC5A27F9312091478D102BF867B320431F7A6EA42EA763C51FF7E0E0FED
A6A830AC95600C837033968174A9406D0DFA72FD65ADF153E5CB3420CEC76A3B
43DA6743F24C6CFE0E9A7E78D540385B657CCB379BF5E238A07B836F907017D9
C0CBA503FCF625536E27B77A262A0EA1C3DFAB015EC859FFE5BB26197A05F4F9
87046F3AFD3387CF1B040DA7B7CFB1EE92816C7C172164CBAE3E9204559C2A74
87E4A41AFB16E7789686047067947F41C82A26E3F343E7359804BFB3B7904F4A
12FBB7EA0E8C26801ACE0E9093D7E2C3E288F781E3E6A53B8C121625CEE7354F
B1A059AFE21AB4DD2B43A9DA710F2D811F63DC41699FCC43330DC7AB9CD10F00
C959F73155E9D63EE7B20970C7AB1B9A8A51D0DA0ECDB917291FBD57CFAFD9F0
E1636B9DEC48FA7FE5B225283546B01ACF3036F1B5F399688F1657E41A5F4EEC
2CB1324C136CFE6C6B92958597B952552EB7A8D58BA7773CF685FED451D89392
C290D38D67FA7519ABD024B85D3002D8592C5D30B50726C7BD17577FDBA79E38
3D99B3A08797696E593C0BEDC50706C986E6BD05AEF30108F4BA192E956D2942
72F59E1A025FC31568C2EAA1D5942A479203EC01B37626F1EC334DC3C6527C06
41162B68D66E7923911921E861FECF78F36E4BA60B4FB8554E83AB554054B2C5
8C05D3FBA010846BC5B32E9ED62C6A0E8D92B8F3546CE0406A87634E2D96F5E1
F007DA0161E75DA55FEC10F7564CD7CB9AA0A016438D082D9A9FD107CEFA7B27
BA3C61B3A13D9A30E4BAD25B2FAE3ECE3FEBC9722B448E3AC5DD9FF784718F6D
DF58A8A7DA91086BD86AC776CAF3F4F2DBC2F0AA81600D53D2A0EB178568DD96
1ED459E1CD3D897776901284DE5673813ABA0CA7ED342130B261727DBAE566E5
F57FA86A7B4EE5F48F039FB95D318DC142E26022D7F85B34558E99078C5E6467
FB2ECE5A828776E62ABBE064F9EBB05DFC9EFE42C9877EDD26B9DC61505A237E
75DA13F87F4F422C5E45E5D0CD32F8321ED89F8C6558622D67008615902FE7AE
908D2D4339EF9F7509E5A491A4E8663AFDB454E931C70DC2F2E6DE8E4BE23204
4701CF8C14B23128617137DD98E2016A73BA0EF57125516DCB203D476462BFBA
16499036AB8F81F83AE2F256EB21595E795B727FD7B5FED0B59CCECE8AE0062A
6E77F33EB4896D04E61B913B6C4170D039344525248FE25E46E0DAE91621917D
15D5D17D2262EC7AF31ACAC176D11DEB3601A993B664144288257C95DBB994E1
887E1D875943A84DBBC2498BFF2DB3BB3A4EA8DE8EB3C6469D98A8D4937DF8B2
9488A21763A97B8040F541FF2DF0E7AD1E993050B063E952BF60DB989AF3F538
CF0D5D1234E2DB9A16BFFFE76C57B6AA7F5B3BF9B315C9C46AA3B83C633E455B
01DE02B1C3A9A93CF961399ECE1A897788B2B238D8FD962926EBA06EF157958C
A91F8F3FB7839C178E548EDA39F998CF21A93665B0E5F16B58AA51D3EDD77586
1E0C62F97E4DEE545BBA8EC9EAF7BE5C66E741519DC9A1C3BEF57A327C12ECD1
B5E66AF8D20DE5750FBF803E2AE60B05B105EBEB7AF44456C6C167B9738928B3
3F0C48E87DCC0FAC10D12CC0C35B8399D9FB0C13DFCF665EFD32637918F26A75
7B8A1397BE108569C9E1421A0825031BFE4FDC8D0C0B387B259D311A2C5E5A13
D6E20F67F52C315E91504897682D739872981BB001B6348B48B0AB08072642AF
FFBE62CCC2447F9A718F0DD92FB1E46A6082F88F8DC17656617A2AD98A2C597C

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR9
%!PS-AdobeFont-1.0: CMR9 003.002
%%Title: CMR9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR9 known{/CMR9 findfont dup/UniqueID known{dup
/UniqueID get 5000792 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR9 def
/FontBBox {-39 -250 1036 750 }readonly def
/UniqueID 5000792 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR9.) readonly def
/FullName (CMR9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 25 /germandbls put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 65 /A put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 75 /K put
dup 76 /L put
dup 78 /N put
dup 85 /U put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 122 /z put
dup 123 /endash put
dup 127 /dieresis put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9AF72336CC4AD340
15A449513D5F74BFB9A68ABC471020464E3E6E33008238B123DEDE18557D712E
ED5223722892A4DAC477120B8C9F3FE3FD334EACD3E8AABDC3C967C61FF003B4
B10C56D6A490CE9594D57A2D431B9E5E10FE3D8832E227A7087611431ABCD029
85F4865E17E17F8CFBD2CADC97E0A8820E3ACEC873F31464466A9545E967E53C
DBDDB8478E69063FBB891566BAF88B7660A4405B16834761F041CCF7650AF955
F9E853AA9F5F4382E1FE7D0C5BB4023818A2383F91249D48CE021250EC9EEB1D
2835E18FB73026250B32A8849067D5E2258797C917F998F2D4121D96560C5FB5
B5D3471216639A8671B6DFAC5E3554EC36D9A72518525A795590C74DD70DA3A7
78BFC43E51D6F2BA52F17D4DD00D389D3983EC54912AFF73684A8A7E345537B7
E62361C04A47859DA084BC72EA53512DC54132EB2EE671793603015652EAFDE3
41C4B6B679BD60AEC5153EA0D2200CB1D097DAD770F5F31E6FC475A225995277
B867B731D5401E2D02B85BA85158C80FF7E2BBCC42B98AC867E67D25DB656072
55A0D32AB7AA483A5A9686CEA4E2B3031D90D84DB3E2DEE7706C91BA81CB8DAA
700E5F61E07D6998C9552C81B66FD10A10033D49EF3BCB0FF22ED0A3737523C9
8F851C61C4BF8A213BF6EC70C956AE48B5BD276CC0437C72BF6515B10739919A
F00F6ADD2798CB211668842349171A5AEB0664D2C44397E55A4A9EBDF54A3EF4
FBBCDAD9DAEF4B0CAEF7112FA828F2F8D9F633D37E5516AB5ECEA87342EF8DC4
3A50548490F5BC9A8A1F98AC7AEAD9D913BFA10CA86D73AEB5BACC1FEEFDCC15
B3655522CCA2C772E902FAB2A6FC153597D52763EB44AB7489FF061F7F58E8F2
AEAAF4D17F36CBFC00D3C653F335D14240C87DB4339DA9D30A5BD1F502BC9013
461B9DB2FBEEC01BB18990439A0E9CA6576BC9CF6B1A3DB9386C4A5D4AA6A5DC
CFA45FB75F22E10ECB72565DB441A194902C91427B4F676E531C661F7A2C3C85
CD534D1C89B6779B2EDC8E44667B992C20C70B663BFBF680A6CF4383EB7CA26C
4D1F06B5EF4025BBE65795F1EDB5CCB97050872D6C07BC2974F905ACDB7A765F
291365D6C8152153E7F017A25FB4476C60FD9EAF9A121633DBEAC32F62850223
D6418566AB350F90F4B35F19598478F76B63E347D4C61E203D4DB8ECB9889181
C387F4B663A502C638761D2782BB96EAC81A0108D7BD6938F67FEBB69218D115
D8E89CFABCE15C6ACC7FEB983332A51A6A73CF4E341574F366713D7FB29956D9
9BF238A87483D37E526A2EA2F101EDD34E34CB92730DCA7235AA0027189BE405
2DAB4AA021A30C28B26C50808E1E965C02F6212EC7C72F5683339425A7739380
A422E6191ED8453AF0CAAA424AE44DFA7CC5C2F6EAA8D73A5101D8E9517DBCFB
2858D0E8ECB7DC430EF23A9E4428CB7DED8D035D6050251AC101A2D0E884721E
2F21E573F948048BB8FF888911C508CC198BD750083B339500C426AFCD5634A6
AAAC1C7E91249667B231BBFC64B4317192FE07FE9DA0DDB5E517D097AAE46577
9555F29D45C67CDE9812CAD03F220B20519F2FF32DCA56A554D4296FE2D1F3FB
B209B5270E0E695EA5A0EF1144957CE045881AEB8D05D72CE57F4D34617AED67
0D3AF0472CD8D60933651626550366E300E72A9C89ACD475C2E2ED9BD44B472D
9DAFE943F8E02A6DC38E447EED964624C37C3130E48211CA279BB6A0BD59466B
42F3D89B5746F29E084E22CF58395AF0F29E55113F3A3F2F52CB3A6DF3D026D0
C81754B8E2E4A15F6943BE9D0087D5166060734FD07C4C57D7C7D90E8C9C1F35
623CEEE3ABAE75E1A18A1E3B50B7266BD2D8E812CFEB4A46B856885B185640D6
B9C22179551002B94282F57FB433B7FF157D2F0D240836B72AF4A331668AE5D4
E6B85415F4E8B9D2F9AF90FAFAA0A3866DF417CA5A31348CF9B41B8F5F4D2F97
CCF7ADE851B5E2E2F6E319AAF5792EBB9DA2C6AA8B73D889F3CDAA42932CDA7D
07A7E59183CD89520DDFC36E5D513BFD8AD0886046585F29B4D7F42CC0C27AA7
53915AB1167D292FE91957E94A57FEE2D49C20C9070ECD736BDEE0F046E60350
EA539DC298156A4E0D019E7D481FDDA6861E20678516AB80ABEC1F09B126BCB9
52E8272A06BB6DD87ACFC423B4A4FC9A3DC8DCAEBB807C5F748F1FF8B17B8B88
F426206BF1B7B7D239D26BC3CF0776C467A98CFBBCA5FB6145D5900137ED19DC
D002F10704AA680EC753C22E29AAB15712EF22AF73D80820A1EEE953463D4EA3
81FAF99518D4FD0F862A324FC44C4B9542A92C5B60CC983CC8F647CE5BDB4D6D
B92B380E0E5F7208A9CD91FA9A469548162C761C1BA05AC9D60B766764D821B6
B4E17F56CE455F06EA1EE2D38FE47581746C4C5FBA63AEE2B58E877D1A8FA83A
31C972D53B64E92EEEA147426A92CFBF76FC614119C6E9C6476FD6A069C803BF
E949FBE50B5AB1F1463F9747E8D353F7BBD991C4F90F920BC9407D8E24720293
846D052214E60390C3CB926D38C83AF697425D80C2B4FC4706615B905516B733
46ACA325CEA68FB21B2D17CF0B68BA4DF249368625CF83441EDBF2B86C957C1E
44CD722BD2537CE84FBA07EC7AE15C840041B9F7F3040072E6084CD55B301C08
A64A53BD4D3DC30DCAC6C152F316ABC59B8EE978793EBD568849DCC2A75A495A
BC83470D503F8E389F54B4A4A31624E83C601B43AC1E52CB811FAA7CA6B644A5
1AE0BFD4FC774C9C9DFC2769ABFA9C83F900BE2DD4010416053A1D4874E6ECF4
D86E44B4CAB15D53E5630C144B0C15B58DAAD785BA298B1893D1B09BA5D40344
6678FD2D17FF6674433C976D6DAC659175CED26139967C9B2B9CFFD78FC2570A
E5142141C2888DBF2DC8503F9137CE7CB21A1EBC2D65BF33FCEFBC85C9CB736E
24E8595CE934AB032CC70BD6A3B0F3BDBFBBE185512FDB7BE3D4A6620478453E
75D044BF770B44C9741E31985E6DAF5A318D7BED12B02A4BCFE60D25EF12843D
EFC9BAE2A3F2EFAD66D7858E83EB46BB09D2FF8AE9C43844A7001C86ED97AF51
C511E3A89A1BE349FF5215D1A57843EF51456B9838133846F19BE79AAA5C1AB0
5F400E5E8E7B0BF96EFCA3B8F0894BE589F2C9FB6C97BD16D38F0A237CD4F034
099C41F85C7E2C7BEC8E02C4F327306A53B4B48B26A8926670CEEF96F6DF2281
7C2DAD99EF8B81BBB777227C2475AE7400DC393D9C0445E925DB1E955950F7AE
53E9AC4306794239346A419F7B5DF4168382EF5956B81F83BD4BB7635B3BCC84
7D84D05AEDC02D14675D777CD19B08124001A4F4EA96990D96000C082A12F00F
7FEF793A7FA69D56D3A38D012168C5458B667190AFE80E02C816CAFF0A71953C
D80B085CD286027E2FDBB05452AA762FD7C813B2E19A79C74190E04E746C4933
CE1E300CAF5DD53B08110509BDA404EF07FA1BC5224BF1205DE8E0C3276A13DD
866675103B960C5F36644F96B4FAC16F5D6E91F74629B318FCCC8E8CB13EB76B
B0B7B90718D913A52A04732EA3667674994A325A7973C601A7DDD50F658E0826
ACB8E53D4914B0274AED98D7BC3B2B7F9D48A7ECC2F8ABEE05CF2C4F2B90360B
B7DF779EAF3E103D1D83EDBE32DDA873768D8C37DC10A5354A94B4153049AD64
FF3E0BB51AB91D7C0B4134D8731CD0270DAAF19BED9EAD800A14B65B68EEE89B
40DD624111670DDC7C030DEFE0D1B96420E249332445C155BA96231C88E70643
D526BDF3CA1E05FEE72CE2B881CFC01ED780C10E89F0828AD55FE29043BC56E8
2750A6DD15AADD54492F6092618F4CC6A31766B17FC60766D18C307EFC9BB787
39047DAD6B38419EFBA46B4E2C932F97451FE78AD75FA90DE409FC6DD46585D2
1941F5ED47A8FBAEF5A917A240959E8D9F9917DEA3247D9CAE6BF7A88DB4C4A4
F9F5A6DCE542420A032FF3392FE0F3357B51F884D6181583A554F75B1DF192E9
253CC828FF06B0D992D5316435980B044BB191508C7C45CD90F797F88856424B
14A5707459C50EDCF3E3D8D1667AAA83015405354CE744C66D9A5728F29E0085
6DBF740717FA0799E3BCC4ED7841588B496A5E549B953A7FD288B4A045DB611E
E3B2F35963FF18ACCB1C968BEEA2CBF52B3999AAF89A05320BB2E97F52CFE06B
9F10E3A79865A3059A957F97972D80ADF678A36E2B586C101FC6AFA4D137C13E
EE7102C9B8EF78CB057F8B7476F146E8FF5C897FD5503DD198128CFF7B5FB339
FAD0AF0EA967F77B07B367A4AC9F668F8BED99B98E87FAC750EE045602D76C3F
289FC9D97694C96AAC0AD1BD3FA94DF2CBCEA24B40F47B9B59E54EECEE7AC4C3
A3F5D19160E4C1EA830D57FBE10D8D46AC5CA0260F22FAA45236F0F542BEA9C5
5A88F878F68B36114E0573900C65E305462B22A3429A17C7A567694414DDDA46
5F30542B8FD4F00F6C295B2E8D3A986B953D96822DB2ECD48E8BB1763434E652
152EF3717F5E7FA10FF0B01D9F64E22C5DBD7254629658887BACEC0ABDE972EE
67299FB84A05B3EFE22B6976DB4CCA384232DDAE38C31623A4E39EA2E82C1EA3
BBB68F1A7DBF405DEC37CB7203A895C36A44BD2D63F45B3888AF91D37B510A59
3C921BB44DA620892AD87B665F69F6FA510B071ECC403CB2BE2F54B3969C9E88
713244BC97C1466DA8216DA7600C221E7E7EF5C789D2E12B36422023A03E11BF
2790FD6062FE6BF62F5010A92F0A104B76E255A0975E04F6F20F760881BDA7F5
D834D1D328B6EC19AA7D5E5678A84C74C82553DBE8BB5765E84F5A8789032143
6020940B4B8D45FC3433D356E28C25F42D0C19F911213D85951B2B00D01B77BB
A4C72E964F9D95422BEDE582A05CD52E03D28A996E6CC8FCD910CBAB728073F9
F9FAEED5470FFA55930447C5BA816F826F983D53EC9941EC8364B3060FD74C95
26D4F5CA753B574FD2FA4D1D333785241D8741B79E628BC852FDC35478C5ED9A
C1BE88C5EE7302816E65C12B58EA16FEDD4672EB3E24B6EDAD5DCE263BA8A970
350B651E5A9F3C281D85BC3F44EADD0D93402E36489BA5185E7D388974B0B700
70575188BB610CCA20F081E2CBDA13DCC6F72567962ADB342E02C1E763B673C5
F7384E24C6E1730A3A790D690A2103AEF88E0C1D4480DC9B25E5C8C9E1919C95
F83320179B4C7C4A26D559BFB24D7D596FB73758C9990C451E77FCDDD17763B8
9C30A9534E3CB6680D3D419D4B70B0B0A0D160FCCDE169714E373F65B7144CC2
DB9A44E041211E1517D3148E65A2486CBE5E74E625261CCF65392FB4F3091473
F9E8DF327D59A58558E5C9F7190DB577D5DC658F5E36258291C708B3D224653D
064BB6079F91293FC733710893AD1C96169B30CBFE4E9D52E7EFAE4AFEE68FEF
1AFD5E7E9DFCE8DE332B0FDC0514F9B3090AC85BBFB527FD8034DD33E9576325
A8769AE09AF1BA792447DDD932B98FC9486B39E0B04DDB3EFB7A30DA0940B33E
E27490E0E841E87B1C90E5248A91742ABEDC10F43A8AF0F9C5B4A4930B1AADAF
01874B9AC3B8D0DBECCDA6CD7E96471FAA15CB7F8A599C5746327CE392224C3C
40BD60AF97BCA6FF6FCAB2FEA114D7300B89E91C3BC92D5B3E2C83BB37992D8C
72F661EFD0AA034C738C019DFB79BF40651A1A34BC1EB9F5AAF58F8B3DA32645
24AFF8636486F08BC21533B5FF7391B0679A78DFDCB03DAF6BB7475A1D51DAC1
EE4BE9B986655D1FDB6936445EF99B58B303FE79F11275EEA96A9F6808EA8775
D873D1052FAC93769789C700F20EB2ED6D15676F6E563A769CA9298E463FC311
83281483B1C953370D196727A6A0E66D32D9480AB1B6DCA77868C1A2D5DB6483
5F31EB6B18EEFEF1CDC31533E69B0AFC6B30FC9912DC89BAAEEADC30BE14F448
1A6B70D36A5D9B01799BEEA686066114910842D022EB464A9A1E8F0A5628BA69
AA9A1925CCADD44703BC67A89F3B48E4680726DC4360274185CF3C8AB747A8FC
4B928AD62B092EFE48B01E33ED756DB696171FDB775396BBA138E056F71EDAE3
7A1E4CC272B8418114B0E81DE0BC43DB3C133167344488820A92DF10FFA26FB9
65FCA2C87D302E956DE6B4FE145145440C83DB43A68F8B29A592B127BDF49063
B7F11E155CD4CAE305525BEA56B7C412A6260426407BD892A3F2B444AC3421E6
FB6E6425EB5C3053C5644666B80405530FA0012B54557327C98E0F4F064099A6
4ACAAFC1870359C1B6FBE7606BB8A26026AE20C212210449905E628AF1B20490
8CE908B7EF3E3DB551C85AEB0F7FEB6A8D215B97998E5DD9C7CCFB2A9402B8B6
1770D4023777D4B45A73F471355353412C51D4CE71FAD1E0AFBD87B5F86307F3
10D0B94F1194EFFB64AD5DA54A4200490F609CA8B912E149F8217ABB1E9EBB3B
C4470E7365CF5E1E761AA1945044B225BD53D142F6588C50E0644740F7DD55E4
8F73201E5354A8BC78339211AFC4935F44701FBA043AAC4BA4698E9D7700029A
C79F992F62627C91EB855F64C4B251718FDA71EDAF082A0C7B00550949D617A0
7071FB14F05620CCF2180941341D8E60FC88823438FD728A4042AFA8B853107F
852F631518B61B234565291B5D5B89DA818DEE3AE3B68A2869DFA63255CC882C
3B16BBA08FCE3632E57FF7A07F857A1F0FDCADAB39D77960BD827CCC8661A997
648BF5BEBC0FD2286C2A112A8DEB9CCB6330A049170D5D68EEEEA011D3EF3EBD
855236B9380087CBBB6BE24191F728B7EAC5B50F7A547AA0989B7C7D3437DBCE
1669341264E290646F2C8C5A3ACAAC7CB63DC692FAAE13E9B40E8BD39FE16A0C
1660CE66872D061056C04DDDC265C024BEF8B7E3C3AEE76FE5C9702002C28BE0
B180295EE00E567FA2E5CD1638226D24A7C732E1BD8103B476EF5702768689C7
D4FCD47F2AB94A2B1FBAE6ABF87B09E7713C773FB65CA83F7318035B332B9F99
24A2C8897527021321D003AAD7C273E4BFA2710B9BB26C2CFD3D9A5D7ED1096C
552D50028AE2476FCD6D12A5D0A897521313ED1A3A8456A70C16EAA50A3E6733
6DC89FEC56AB54A579EF264377A103939D5EE00A90B4F2206D0023AF9491FBE0
800C6540FC945199E20E945F46CEEA2E885F6800B9DF042BCEF4291A4B1A62C8
6A7ACFF872B25FA3AE69E0093F3D0FF13A3313430C06F1AF94D500431566F659
E8C859A5F80F5BD2E85C8E32603D3745628E8FE6FBC50FA68F9C3811A2BEFEA4
5852CAE2AE5AAD3230ED050593BAD0A9581EB7B327C6916B8FC348F4C23E6FA2
00FA28AAACCB3091C1D83F7BB88672A53A2EA3B8C7C24374E400C57F0F01019F
E52D5C47F389D4C9AF126F4080F9AB8D1C8F470932BBECCEC72A9796F6E965A4
82057DDB43D68298A00880D4C2E2496F26F015FD83C5549215753459310339B7
6B2961EEEE74DA31FEC8E2BDDA42D4080A32372AC372524BDDA580EF6634ACE3
128C69D04D890DCA337212B109585C665AA83EFE47D5BABC2627A86EAD11BF7D
744176652C7F9497785A7A06A994ED8414BBE8B26E74D48CB83FA24AAFBDD507
84A90195EA3D77BCE8C2BEDDD1DC52E8164DF15D65B916EBDF3A8A76849653DF
AE3CAF9561AF3B705F75B9E5DFD6758DB65A2FD54683759912E0D0035CFBCD86
5D207125947C3797DDDDF27B0F05D69411E79DF1586378263BE1BFB9863BF9B1
B2CE4EAEDABE212A040FCA30A5AC8F758F4B543CA539858D7D2DA5E8D4AE8343
DA1C74EFA3207BFD3AAF761712526884385719C5B2B1C3C2A125975270E98803
BE1717D7FD9500E68B2C77DBDA49C6C7CC468986AD847D5976FA7D445365047C
DEC7C2EA876A6D2048DB062B6682A3D95FDF21E5146709D05B410E2E754823D2
27BE2684D66916C7A3F9EEC2D5524EAB5BE121A7157A426056F9AFC9278E274C
F403595B36356850A96964F680C8A76262D096C7AE9B37C1AE23EB9CBE9932D9
014102CA922C49DE8429FA026796EB130B5C4A2192EEE72D2CD5E415EA5C1C28
F4B537D15C66BDBEFBF1EB66E2E910614F0C02936959E2CDFCCBAFB752155099
730258CA9A813FDBB0170172C4B89A4326F4413C0DFAAD91E9C3A38989BCA560
579F6436CA6C289F0C2133C543BCB734F552B860C295991CB990C52B19317FDE
765000BCE9A1A61A802EE8ECB4D53DCAB9172BDC88F35057F812CC5C46C37F98
0858066B5DDFA0566AF29195C653FA085F712258B8A1B9AABCBD50AC03D73F4D
FBF1005237BD3132973E3F84D6B62F9B6376843D91DA00229226A37259CFB0AD
3BC263BE92BA1A84845B61318A6BEABA06D2F8C0210A261DA2B058F46A9E1B1A
2B01CFE59DC489CF112C663A5B7482B78039D2C3956923C9DD71A04C7A9CF032
A8B3201C06A7EF3CAD09AD5ADE65A51B6A915CA708D66F453173D9F296B3DD18
6F8C3F8658C91B59C58B51B2ACC83F76ECD2882B91FCF7E694BBEA02488CBF10
A625704C61242B4B1983A5D0B134C8052495CBAA9D2D7D6E863C56E171C25804
C384F6A456EACA3A497891A5CC0A4FBBEA36400EDC5823F8CBB233569BFF15D6
5901DB8B634065D2484218CB438CA03874980746D18D458FEC9CECB489D6E67A
86F4EC045CF1E45A9E939D5F0086E13F8C33C21045970DC7D1085D325C10C7C0
BCA751DF9A6109796D19177F359A50F00D4F0240AD2BEDF5186C57A8E724EAB6
911A74BDD8FBC8C6E51250F22B82DD3E5067007A5B0E360136BAC7C401A3B6FF
AFF7BD0CBC1035F4A2B50164F07B9C73FA6801BB5946AF1EF7B066D04982AB0D
A9FAC08BE783A77E0AD608BDE73FB6E524774D43991644C9226CE620CD953D51
33D149E26A48B17BFFC3D843FA772A7AF8F69ECDE1FDBFC2A74E4A69FEBE91ED
B9C23A24EF78D3A966110A86829E8886519D18D7938560C5313CB926B3E29419
4C6719CBE8D743A74BB5C85EBBAB9A0DB67B0F3DD5A0D6FA90C418428EEA7FE8
502D8A61B50F46B5B9122EC236711641A7903C924ABA5324C4E3C6C13ADF5118
874CB5994BD8761D2943215273F91C3DC8707551A960929C0607DCCF8B94D905
291D44CCC709E96C926723389C6C2F0DB66D502014608F6D4C6860913A5C1469
BE1B6F645FA95465624F53442E11B84DF4C71D2EF0D56D5CB3D90AE89CEE472F
184329B8DAB35303C9A20000833FBE4743E1D7D64F073DCBD91BE5AB10A28CD2
18D4780DBA190F3DA6ACCD6DC6EFE8C7AF9CFEAEFD074910D82F643CE5C5F2E7
B2B58E3FB1EA6CCC9220CF563BC402453D4F187E6E04E35951523A359268BBF6
030E1067A2A61839FCCF99E3DBCE93274ED2C5CAD0C1E29BE41F21AACD787CF9
986CAD0571802208CD8C7973617E598053054EC8417ADAF656C3D0CA609D4B35
53FDF5D206A1ED7C5785C7BE53D7191ED6857755648581C0AEBD94ED6A8AE364
D80F99EC83522B2AF06C988EE66D881BB06CD0E301666B6B5A5415188ACE4CFC
939AA16F56C50286503CEFB57B440709CDB5B3C31CBAE9775E4E085D2A5099C0
FF489438BE89DA50BFAC7999BE4A25D8F8F92AFC1924FF85BF0BD5547FBF0ACD
890470AF45DD88C4018836F196A026E9814413F0AC533EB8FA3E6BC38AB11EC6
790DA9A6B6B3B8B66822C8E94A360FD20248F857B32920AD49354FA7A748A71F
C9BAE1C91C1F7EBE547F10F4F1FD4C20B8E3F22CE2C0394E892B8B665673C1CE
114FD0C713FDFCF50B512508C61F0C7E8E4506AF80B17E082BC82917D167A542
ED2A0B79445680372EB8A34D972A13ABA38387B2D6B712158514DE43D9EA8AC6
8B343772084D45B94B823425E84A58025B1F47E53E0B124A48CB687FEC13BC7E
4F605F6C1BE16ECE31415E20109E6C6BB1AFE6B677FAF0D36554FECEE33D4DA8
C06A560398DA95F5F99D0821F2DF07FE07F2225DAC397E855A26619AF11BA418
18E0A7F84E849C3F686FD0CA8D435F1938D4096E64BB34C9D928F4412CD96BC9
190FF432129F3047055366E9D4398D2AC5D11938C8D83CEBDC625382BB631892
1169C753CCFC29B9C1779C008BA18FC36C54C555D6BC742741DA16452E6D23CF
A0F2B65BC94AD5249C78BE221A38C45A307376513CA855AA3975A603F1A2D5F7
827779A886A1479A0B9E322F6CD69D7546E4CC28DE296B0F605E0A0612DC1899
F4B290ABB57D39FD199900243D02E5432DA5006F58067DE4F2C48BCE2DDD63C5
006F4E3903A0513ED97AB139C137A30215CF32BBDA18699CAA3A2D3625DF4B76
D58D6144FA6C6279F24455AEE36243D68766DD8F151A7CA92EC703B4FE308A08
37E267E38846028781785B9869A04D4899EE898EB349CDBE1919CCCC61972262
47794FA8BBAA3F6E1D178C23785480363EDB6C8DDE7B843902F8C0DE4709C166
3499F988B6B0DACC08847645AB5B8863FA03DB2B8579B02C0460E9DDA16A67BA
0E0EF928AE810A14C3029F57C3CC3DA50FC71D6F3679CF51FDFA11157BD93508
5C293D38D6590BC5A049FF18DA171AE9119C51C48C374BA974F60311528B1612
EDBACD701F281A1DE78346E8C5F8B946E221F0F0A106E14BDCD6AB25065D3989
8AF2E3F06E6F53B46FBFB2BD6F0B72F13DFAC389644BC61D5DFD9D94C4391811
BD0A83429444F0A794AFF377A8057332DB8DF365E36F4B9440E308FEDBD16C8B
74FD25E8628B7C48808F662077130E254DF39B4DE5525D64A41003CB30446631
000304E0C2D4019C105FCCE3BA8664ECDFB19799F1B0C95D77EE6D187AAAAFE2
2B4C99BDAF5AACA6B622AEB55B005A139E15DFC0B81955F956DF0C77F2C19CAC
414DB43400EB1B5DB5E3FFCB33F7623D1E0BBA2034A99661D86E0D90120F7A49
11AC174FED22F6FECB1E7E40E59D2E551198C9AC8224315753BF1D6CA0EC7981
15713E1415A35C4EE59A61BB08279BBCAB6091F45ADDCF26C70E71CA3B2E6CFA
9D011C7CF37B467E44497395F8BEF4138207EFA5EE24291735C04BCFCB5C59D9
66E362F54627959F6E96D0B0A8B4819148C31AE2C30BB227E4D647D9F368030A
426D9B865F14474C431A1F59D0A553376760BDEE20AE80B25FC0E655F00B3AD1
389A846BA7B89B83706FEE884788B94331056CD9A3F3666E34712E718619FA9C
B7EDB14B03A3CE00A63FED903CAB6BEF96640B3A8C83F0E2976B4C22A626467B
394DF34A23E576F503AE3B5A85FCFF2D3B9045547CB98B37C47840B368352A7E
F082BBD5404D95D40A12D94478285E986B0273993FA77FBF69577F7D593824D3
85E19CF1D8F1AF6BE49444557A25534DFF4DADDF1FD3480DB8DCCC1F40D32DEE
592C2C749A0EF39A22A528922308C0B65D6F77AF8CEBA28064077047003BF00A
998E6866EB1E59E74DCC283AFE70CC64B6787AF34A42DDE679550A4BD386674F
E47D5B045770926DA3B4D5D492F8C65A10749466B52E064F0940CCBAFEBF2EAB
C1593F18BC472702F32C2944E22BDC4E25FDD3FFF98DC99D0DBD0B626C654ED1
BB428597871647F78624AE6435D604252EFECCFFE13F4321C04AE86EF9AA5F36
77456A2B503BD3A2242987FAFA71B97A17FB514F2F5F266C8C2F09DB61868F72
BA61BE2E28F5726874064D29C28F9B45903389588060663636ACF4C7BBE20CBF
39794AC783BD53B2F1DCD9323885A534E68A5062B894A4D12B01908DC6109BD5
94371D87ABBBC9135AB48BB9CADE766721F35669C31F7F61D28FF2391AA63370
8E23D0785A2CDC463C4B1602B6F52D6128DAAEC5CF65940A36C01077C92B8382
6CF2FAA0615532EAE5262711F7FC51EC2CEDE69A6E8BE66870D802E8E00759FE
918F1DCCA0B0823CEE428C21C3F0CF302F875519DDC6DAB9B1E5FB1E603A0966
D3F74112B6F60867CD36E289A8313680B6548927A08AB35ECB2A6E445C729769
8EA3CB96C0FA7092FE30F66C7A4AEC8A72F2454CDE5B180D433FF85F0D41CDAD
F6F3904E72A75852FAF05E2F9EDDC450A07F332212D2747DA3F4EC31B95F5723
79F056EC493D7F710937EA46627FC4F53E38DC29A9F8DC74A0480CD0274EADCA
BE6C45AE03368F404EAD09B56F1ECC8DD7E18FD005BBCEC11BB447DA4B361156
EA38E0DCD2E73C397D4C75C4936C0686A67904DA4CBE05A56EE8572FEA1D32AB
266BE742E251EA3F971CC6585B20E1A1EF639521800F092436E7DF3D4435F262
BD195FBE7C339772466DF58DF6DEFBCE2CCB4FF97ACE1AF19E50C2537A152D29
58FE21400E57EDC4958A2FCCD91BFCEA5E7ED0AE49EB2DDAE9825F5FFE538C15
9A4E2FF0079ACF24B78C5E3A9FEB0E22C92F58D0256420D42C14B6960720CE37
C54F5B24E315AEF4698487AA96119E75EF4826732FC53F3277946A3690A53830
5C9C15580823936F985F374EFFB163163A90FF13F2B9A3675124D028780DC655
AD7F031C53A565167FEDB07B9B3B5A53A15DFCDD1888F69483088E0697E44442
D42AB22C68FAC59A641815CB83AC3429F4291B15B66C4BCF7AA4E4913DEBA0C7
D54521E418D3E2404A8DCC6912FCB32C61F8FFDB802F2F5A6C2F6CF0591722F5
825CDB644F1AC4A3161EA5CA9C5B62824D2B1E2999C8D90DC45B544C0794A250
87E83AC867EABAAC2CA78F8445874D2210675C0CB7533CC8CFAA85ABC459C6C8
F60FE3E4DC47177FCBC036A7E3B13AE5DC066F3D1E428AD4BD8D1C99BC2E28A4
B9E3D34C4734ADE004486ADCF312ECCB2E49E270EF403F2F5891A60F8B006022
17EFC98B6C93D05423A5D3A5906E2108DFE479868D5FC6B242FA6851C48812F5
25318D0F0E4D948207EC4F0F3038A9781D73874AD8CF5EAFD95FD319774F71E5
C00390FBD10574852B7E96F0BD5FF8F04C363BD40F79F8EACCB498F7D907A700
36D13E56ABA390AD0E5047EA0877E707A81286D62870C93304409FB53F1D13B3
F05BA22674CBE0D27CB00E879160BD0BFE7186F068B3D3BB3B800F61A66C54A6
561F1E4F315FF7D86CE1C7C1D702E99170AD3BAD6803D3FBEA70B55D040C3803
C0BAD2DECF6A2A224B621A42081E8D7900124802783DAB8630C3BBDF99BE0A04
A225B1856513B6D32C55C3361A3D1C9D65C5ABB050DD319A35ADC201095D932E
AE6B836ED40D29F556608FC54B785A39408C69A69E774DA8F2A06F4B04554E2A
551450F4F5A61199E76F89DFFB6F40A1367A79AE492499CBECF5AC0A0A9D6FFE
94AB14AB3D33EE766711F82CDA78E15DB7E314A17A0BE8C41FC2AADB99B90164
F50F35231B873181A59981FF346BE6875741FBC793EC57604BBBC0DAAD9DD477
8254EF860BEB03B29F9461939536A500A09D9AA60428A6544376AD3F59387C07
DB229E139E1073BB7CEC4EDFC644CD4E1B117DA9F7B6E1C69A148FE7742C1A48
50E80AF4EB4871BD639957C96D40A9550FAA2A01F5C2F414E43ADE1D9B8811CB
DEF1362C82202F3C236C6FE78E563266D9AFF5F46F0EDADB3232F2E7209EAD52
977A843ACD00B15F2ABD03A0C4BC7038B3A6BA46B92CDE3C5206838B1839F324
3E4682CADBD1C9975E3DF57F150882694D021EBEFAE9B1714F6FFE30C6435F1C
C5D1B9C2005C61468FCEF3FF24B99AE6F3A1FA4D103737787A97A0114F69958A
F376167679DDC0791009A53CC97E4DA1C82DBACA0F7FEE68C8845CEF0F37BC55
299FCFDDE5183BA50EF6C12A55E78B4A873F4DA7EEC045B5F92B384CB01E79E4
E781CAFBDBB204522A1711C29451C83DE397B74D6E8F92C6624EF65EEEFE025E
5EBD813D780EDE1B21C512D98AA9F82B876A33C02FE2A39EEDF3781C354DC55F
373509AA9C4A71953261F88CD53BE57A971F408E750F46F802F0B7DD562C0187
0A30E5828E8D1CB8EDB7FD6A3E0BE05457F19388714C589F29FFF46C248CB2D0
204F86A6E4549C385FDC9D769AA6EA43788AF42C1E148C88D7F5BAA35396D9B5
8A64F90CEB35B8E5E2BCEF8282AC16E3CC5E4C47972878AE09D6E9C96E436F99
1A043D80E7EB739DD3702B52CD3C0288C77BD1EC3A9CDE1B715A2B96F80E2BA8
DDD766418AE7C3A4B9D7D3B4205BD0BB1164FD74E5E7E330CB983E3CFA05D080
74505D97DD6F5DA1819CF507C09493CF16AFDD8883B861F483098F819A801858
FDBC910B40161DAA84C3F9FB951EEA707415E56E86D506E4A7549ECA7DD2EFC9
F5713EC6D7CF7C15006DF8CC3A3FCC7BADC1872E1639C0820BE411B1EF777BD0
0E59F449E4440DA5B879583748C5CBA6A686527C2272BC4F5AAAE0FB9C0C7543
76D1BF02A966CE5AB0D3715C63DE7630C5E84ED7C45FFFB22297498A9B999EFD
1CD1A755ED9669B34EB8E3B65168FC2C598F6734C297EFD298A2207E2D7887B3
61297AE172E1443FD97D6B5CAA1412081A53A771E80512A6EDB955FF298B8BAD
EFC211293CFED9307CE88EB8767F212CE3BB16564731F9D397908F7E45EFAA77
33727F96A3FA0DBA28A8922F3007EFCB25A8C5955391651AD41151AD51DB6A63
4AC69C40217F0D10D1DCC29D5066F028F6129B737989AA150EFB6B8C403787FA
C65EB8AFA030895D134C4BD007A59C543E9D47E40A15FE1B771ECD90B8D1A790
FE514FDCD9380D4718378C41258E3EBE3F12DE33EE323E1A882927CDAF61C413
83535839E3F03EBFE200402DBF55E99941DC5641B778604454965BF581AD5A21
DE9D69C55690BC19811DDC993E6910D906D7CAE0F5C2EA5708C677EBEA0AF5F2
707B006242982849405B78E9F65259B1239473BA99D30BD06C763353A4DF48DC
37596B31F8D8A26451A6578C304C2E54A3A974F8F4FA7E9E15E9BE52936E67D3
301750EDE0C4D5A3AA96ED37CCE6BF7A7E4EF472ED097474DE4AE121328C4E0C
680E5A43F587310AD9D320C7595B8E7B9D98A49C9B7A916DD6BF6CF914D072E6
A3BD3048DFFF08E6BAA7A40F6AE732A2C3B525F34323ECBEA5FD4CAEAB699E49
41EBF33E6A04189C06836FE4546ACA1A89F4189BF62411C9A8C3D186F45DF372
506E2C9A987EFC14525D23107596BE111DD248FD7D53D26D763180205BBFD347
A4C1B4E27DEDA84979D793EC397B755A48D2D85BCD8F7523E9CAEABD620CBC40
2239453DAB40FEE99AB57314896ABB775518CAE76AE327978C67184394FDFC3A
A4CC754EA7AAB1BE2D30D00FCB4A828C99C75F54F3655703F57628C16BB335A2
81D11F10A534BA08BE0BBBCCD50B41D763694E3BBC9CEE295981659EAD5BFF02
311807F325269C6AB42C3C28519556B9D35D244232C5B9EBB79E6FCC77DFE988
A7679ECF0F3E873717E90FA9F2977F807F1BDF9477837770C3B04F6D63241B9A
8994D2EA2D2466884B494A73BAC7A4C5C5DA94D88BE79F313989532F18C3C397
1C9020DE9A9039D6CF1C95FBDBF3D7738DA60C21224F36EFF8C091CDA4883DE0
E6D8A4B3579318C29D81776D5CBFCC3058DA8D53D2588CA1FC8C4A5FF7D96F5D
D81B8B44A4D1681D45410BFBF4984CC662577872B90FDF7CFDC726E419983BB7
951A996F2B3645B1BC4C4C0148CB06EFAC93AAA5555EC99EE0CE13D33B97C433
98702C840576854DBA1AD4C1CEEA42FCCF07A5B1F674ABB9E7FA4AE621A2920C
F2035A907D79B77CFC67F882637C302362898CF1915A137B7D5EBA166016C975
02377A06D9375B3C06F6AB2EC17F47F28967D828E004A5D1DD9964F43A510B70
AB258FAA9B86EC72B0F4B4516844F6ABFEFC6D4619FC7F113B98BF1F6C59CDF9
1E638269E89E4818F18C0CA37ACF490022D93DD6005BD139409ECC85D0478EA6
6AF5A1A4D19ABB64B4CD1747F9388BB237C0888ED219892BF3C4847AFC63241E
845BA4FD21B7575D782D1687CCE72C08967DCB4C6D3D7729EB2613ED88C448F6
3E8ADAA21B64FE905EC82A9AFACAD4FCF639238E949059BA45E26B8473315E47
63B0344EE7AC96285554AD68F4D3F3599FF86B81DE769A5AC6D5A5C42FA086C8
D4E60EE98B867A79BC59B3AD82B098260A66E32E25A3C1D87790261ED9BA4A43
66F005CA44CD050EB3355CECFEA5948DE6709E5DCDC2220B7A66CB980F101B3B
5D9C34A76A0DE3882AAE7317C91DDA612D74527FFD6F2E0694E35B70ED2B4B1B
7041A0FEF78E16A13B46CB5BCF1B76AC67F260687576C1E7DFD3614B16AAABB8
A5A83638667C7DD6067032C5590937CB6050B3FE2C3C915C6172DAF178217F8F
938079C8BF28994732BC60DB6CADC33D7E32C25C2D206B69DAEDD12316BD06A6
29F58AB7110715DC06D740B5F0BC44C6FCCDF35292D09E8B653B822C46C05D52
22AC38D40CF8E7D93958DDB9E790585CC7D228EFBF4434BEDD52B8D49BAD63B0
D6C733282CC90FA6B2A7279B091CEA680843FEB888FEAFF01826435965BC8503
A28C5EA07BFAE1C1B8E2CEB52DF9945D5FD4B8C4A487A03B7BFA9461CDCB4CE1
576D18C736D10EC235248BAC2B27957029ADAE2EC1C3DC79C74D948974B4919E
48A1B87C08FB8FBB6649DB620B42C465C609BF324124CA49171A9BF7C5F4003F
7BC1950CE0BC694C1D253A5BB9823FCEADCA45B56E2D419BA3EEDF06E27E6F56
C30EB0BDB9BC800CA9538960F336C54EE08D9ECEBDEB46A189092DEE456D2CA6
C4D787BD569B6AFEAEBBBCB3102894D7FECB5B22FFC1BCB325D463BCCDA662F4
438B9E026302D3DDA973DF76E8CE78025D1F03ECAA7CDF7059C6881F7E92FF76
1E8867B8192F75165419722883BFA85B6BF289A67A3403AE257ED03F554E790E
3060947C78BF94268A3757775D3D81E97903D1F92F94445739FBC3058C572706
A9F3D072645FD6B52BD743971E72185A81A2016F632BFEDCA4868FF55AA3DA2C
14FAB5B41808CEB92855B47D35CC80838B904B0324C40E26A711F0213CE4CD8E
786BF8A6A98DC987C79ED5020FED8F9C9C8A4834794457BB8003DE88226287AF
A57C0865A0FA8D663FA140AC345324811F2817AD3A5CC38CBF11A1E7DE7FF931
79C54813F717A1A3F6D2ADB49D60C5C0CE2AA4E932416E7E1B20200ABFCA765B
2B715FFCBE5250530BFE650067842B8A3EBF5B11D27E4E1FC5E1DFB389384AF8
77EB0BBDBE37508E136BCC949BC9AAF4CEDEB08593FE77364F0F1D020D62A1A5
2961F311C2EE3444CCC37E8DF69FF7247AB7B607B52C864F307F8C839FDDCE69
7A6FEDA8820B2D7788EA808050A7E2EEC1AD09F83DE8B8932583BF17DEF12DA5
B12B062DA278634F4E41C589FB2961931BB9C3EB1118CF6A369D2C03C6C31208
6899E5035BF35CD58ACD44AE4423A04FB7CC48CAF1D2AA15D6414702BA2E8687
5F57E078CDFA24261BC292F5A3AF97938BD4A976D015E3911549FFC10E15220A
C549D3523443775FE2577A5121A0C044D1DB63E7DE3BAE45542CDAE4AE81501B
01D017752CFE3CEAE0FBAF1A30104A428E3CB314C1196061AD9BD0AC41A3057F
850E8181589DF0BCF693AB89D44114A868DCA1D75D8EC5CF057AD89467628036
688070785629477B258C70883101DC68B507D0674E96A9D076D848E28D024C0D
D1ECC772F0EFE516AC4EE56344822582EB5D8A52A7BE20F2FD89573432FA2C7D
4023B84386C4CA1DA7292EE9775B67D0D60C9DD94CD3DCEA6E78FE180B8C08EE
1C8C0CDA12FCCEEC0DD89ACFFA418E5B59A87CAC926DE1D2D636FFFCC5A2E1FC
4AB7F0B80DC80647942BE6360AC3B5DF94F5082DC8CCAB1986D8DA8F465FD947
215537DC3599D54CDC2F6D385D69190CF078FD2BA3304ECEBC3B6762264B5DF8
843D3EC84D4524C89B41E2E5101E44CECB5AD18D30A002035E41E4CC4B555258
AEA7DAB1FDE2DB7B49CFAC422142A266BA197E7BE85ECD8358EE4BCF818BC7A5
C8B452A7A6633CB7C2AC1D18F2CBB07D2363F09A307413E2F558D269B00007AA
8EED5C653B191A01D6C72BCDBEF9BF1347BD5CA46415DC2289026D2F5BC458E0
E4D15DB443394019A9B4C552963C089A3685A15327238CF8BB8BF96842418131
E7AF63E27F8C80F0B0008404A72D668ABFEEECC545D1DC3528DACEE75B91B36D
B308BD6B93ABAC0C5AC019E807A1870467D1F890D64E06B5A91A44C76D1C84A0
2DB484FE79761ED76FC7ABA72A233A09C2C2017871DC5C834F70E4308D30A035
3B2DF07AE890710AE4821407D642FEF725B6EEA6048AF159D2107D544C40CD51
9B4CFED9C1A84681B03EC5D10BCAD79538BFE14B5C3EF66FA123F1ECAEBD75C1
F94442CE9C4F0E715F34D90DFEE5FA34537D54DD59D5E0B5A03BA442C8C7F572
F70E98EF4A9913156A18394B4B8776FD47F8C600D4554A1DFE7F4242B0362376
B5A5B56249FAC269E3397E6114E6952DF3108B45D651B84DD9D8557908E95A78
6A559EE983265ED8C442F8AF62DDD03E62DF6694B85D059E01423C3707B89E9C
AB96125C272C49F7EAE2BF3C68969282CFA88A4FEDBDD72DA4E7428E9F75C50B
95A329F97F6C2F5A713723A727D7BB943542EE0A20B8784FBCAD2F5C33852802
63FAF01720B1B1FE62F307FDECD68BE99D2B668B71B407A66F26A9A1010F0307
796B79283FC14C49646029E950A15A8473E89AEBE2B553B5CC943279615B2878
37E73691557265515EAC72A4592EEA8E21A4A54DAD7120EA2E132B131C0C90FF
AD176CDCA0F256476BBEAB85C6B91F5790A5BD284CF268774C1F9F0F1FC83A79
3F30A9328658910279E9F8057DF46A543A3F844C07E6495300090B00B59CFC40
F79A04A2EF4F78519894540F50157A07FF419E96DA7180DE4AD23E79C79A7C11
B5360B1C5F936A5AEE446E315F6D1BC7656BFE46B321D2AD9C2440E5760859D3
20FCE1384CE4FC3B4E99F65538EDD5225290D51E9179C6053D321750425A94EF
2D5E2BE11CF668DBFE69F7B402DFCE34855B19A075C51206D1A747666AC1AA8F
31ED9FDC17874BE4B5BEEF776E7D137EBE547F10F4F1FDEFB939AD9BE71BED7B
5300925FC70FAB2058613A1A508C8BE62E3FED0201414A593E5991054488EBF9
C6FF1076903002B7C535CF9F52353CF5652399CD2DC737AF1B41B70A5F6D5B90
634A36649151656CE184C2CE4B5EAD45CEA5AEE3CD045BFCEE110A8FBF0BA508
EA2E624E8CBD7B6D29896E8D989522A239F3F5D0FE9D7ECE8E63C3C827D0C0F6
8BB907568A0104C31A602C176DB265A5F0F2FBC31A77A91F6451F6CA0AF33786
4C1E554C252904526E8DDF79D013521E3E9E8C21BB258529753AAEC2640A4FB5
3E6D8F1EA00A87410C50A26E06F5DE6BE90409BA75DFAC06AE4F939F625028FA
295D0BEA1AB37479F31DF15026B4600E545D1876F550C8902ACDE54562E0B120
3FA01D37D96CF39295558FFCBB2E7AE49527428DF4F2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 25 /germandbls put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 65 /A put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 75 /K put
dup 76 /L put
dup 78 /N put
dup 85 /U put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 122 /z put
dup 123 /endash put
dup 127 /dieresis put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD10B4729E5749A10EDBE644886443D1249
2C8517DF8D8AE98E2882439FA81903941B363A7D885F93C6DF9E1FD89F2F8CEE
B870C409ED13E78B4C914813B0A01DF8F876EDCC4F384055FD37C575726AD69F
F23D50EC5BEE2FB95A44F2B2E2DD94C933D90BED2C97B53738B4B2ED56EBE617
BEF17B9DF4F314A37F10FDE34C570D7BE76A496A58242F51E7321380CB042424
855F4B53071DF5A0DA5A31B8AAF9FB4F4C4916224356D1C73DC64C377C0AAED7
2083A84D556AD3381AA76098253315420A0839AD2FB97B7B14455E2269499734
4EB35AF8B365EDCEF8EAF63CF46B5BE662060002FFDC720B68DEDD7B89CB2D5A
1CBF762413F527B2581AA05F5E7CE6665D8C4432AFFCBF37F6900013D0DD0D4B
5407F038FCDE2A796E981760EED747888E8FFAE3361370A2080A3CF844D40AB9
C3A7A165D6AD0D9482CF1D7C876CE1CFE159231A026D3A3F89047579FD28BBFC
6D05951627A6010A110BB390AA5312E192C2AFB92FD47D52F256FFCDF706B456
B6886F5FF5F416C079AEDA31F576F64475E62FBF30074B701B39665F4BF4157A
AFB9A208FD0DFA792028968E84E511B51A5A93B4F783422F93DB1A210C6917BB
6A04E89C45507BE1B5BD07ADABCA84E043EF7C2EE7F2A4AA9EF432736C21D1B3
EB4C0C31E7D7CAF7A1FE05B1BD05F2B93291F355F93A002937B2BC0A53CC9B73
61F5223B94F37BD03F498CA25084B8F3F8F2614882C88512C172900667BFEE08
9AF2C6CC99FAD2726E5180693C7DF6E182F3A221D1347CFF5111DD5411BEEC72
6CDA1B74ECC2A1F0EB95F77B140C4E1569529D433336951DE4EE9AFB68AD600D
610E32BDC63998EFFBD8BB34D2423CC7DB281BB7AEABF17F24254496DA229B29
5EAB9A68638C1196B77BF70874462D6D951BC54D61D6DEF2B38B824B416C8D24
FC15F45E5961D4C11AD4C569CB28FC88A4C5BC4ACF593CA80F3E58961CB49477
76D74FB00CB43D790D3E80AE0EA0AEE1984C590DB7EE142C262C4D4E5EFA64C3
49484222A9FCE7DCC8B58F6404F83070F82264386ED3307C69F7B4EB8C14B2A4
EE6C722019BAE1F9E731B65CE2E464DC4A73AE8610F898B3EF03C1E2B447412F
3D2ED6F432DF4ACC74B2CA07C3740570B96E62C2FC5A08BA3F694BF444F28DA1
C82E9867FDAE1B24D89C50C3C54B4136149F76989E8C596EA8BC2A1119161B0C
97025B02598E2A483A2A4136BB47323A08AC7AD4E9217EAF912C86CB6CD5BBDF
82619D7C8AFBD8B07C313A040026484B57B4CAD36A582A35B9789FA83E1FDAFA
7FF188F74F08626093D94BFDA221D1347CFF5111DD5411BEEC726CDA1B74ECC4
02EF9788B553B8D19BF6984069E6A19F2F62F3EAA66FCDF2CEFC13E42F1CA276
4FC4EBA1EE24B269197512FFD1A36A573708C2EC010028C55D9D6688C530AD04
8A64683C37CDDDA453154EF41FEA71E4E811982946531B462AD740B4CB6070A1
78427707797E0E880666806CE627529201F1A70ED484FE92F0C684F4A041973D
B92538098BD30B3B2BEA74A8DAF08731634F31F161EE965DD7631276D51652A7
7823CAA8C4DFF3B24D14EE2CDC8F0BD084CAB30272E8F065218BA88532BEA1BB
7DF11D303554BA06AE21EE1677A753EF0DD63F2C97458AD7A361512E05D95A37
37194E9447DF022BBDDD67D0110B8331410F1DCF9E65E7338B42FFA7168F4AF6
8C5A80F4BD3C2C51D0BBAB8739EFC7B244E317DF8B00BC2DC3C8B4A67D07471F
E21495FCA40901142B171E180AED29A853C721060702EE124D984DF184B9E36B
FA72AD72FB9019916E30857487CCA906FC8491DCA0F56AB93E3A62FB20266E84
92F2F3BD650E492E4A812336F6E64CB05575ED6289DC4175C06C018021ED155E
58FA101D56E70EE3D0C0F7D8416730AFC036F01C56365A478D22241CCDD62834
CD2CD666F47C17D8A5BAD6E0B6E83FE7B9EC45589B444FC71C0A6DDE61B9DCF9
EF0D8F4AE01896E1710164F3313FE6C8A51F12C003145D37BB07679EB2ABDE89
D509E3FD81D7A42F776FD575179A7DF9B81AE89A78D2928FEE6F38E88706D20A
4996F7292D36D4B63628E54830B4CA2B89B840D24148AB964ACEEA7DA29AEA44
A0C27A817E6B5319CDE640D9250A628122F73AAAC69C9A572456193C03E5084B
F5343F207464ABF8C4ED5B8B4FFF9CA169A4E94594F9B383954D8EB5A2B2F79C
AC71F97F7EBA2A27CF6BC0FE8C66A6A82D7D7565D44FAD6F468AD648DF75630D
D5D1108DD1F178648690BB330EE099B5B5AB05BCA50544E5D07AEBB58A98D087
8500B284B3CA2F0D906F628AC406A4C44B0F242AEC05C822DC3E08816A4EB7E0
315A30D22CC042E184BCC24F746C4D4B4CD0FF350D1CEFACA386090CB61900B5
0E6211214972FB64E2377D905807B12E46962647F86CEE0790F92FA44B49A455
25603F5B8341418DE17B36E60F5B6AE282C6D6C18D0019453B40517637F5B29E
73AFE5819BE1D310C036885D64848D9E5F83D142FC89D59AA8F96596E6D3C830
652B65BF89F37AA3C10A40EE8E49915F1A1B95D21686E24ED485368169D55005
20E2AE932D2CDF44BE318B6A417885D67CB62F2FC7709DD10EE3800CB127AB13
40A29BB599394EDC7B663D35D2E7183BAECD80D6E3E75BA397998E519BF0834C
47671A7D95D5E15459BE6473ED7706274ED7A5CFCC0057D9F22519D9AF3CCA4A
47F78B43E8884F6490267D6DFD53F8D54F38E4D5ED51662BDADADD4BAC92DDED
9A9D1C769735FB86D8ED7C562B08105860D04314D50949820AB7E8B18C7B8C45
6E952FAFDD4D8B87CFB4AA3ECF8B08DE3307AEC1D11929C01730D7012FC6D751
F613393060892D5A51B78CAABCF38CC4A173A9ADA3B2066D2CCAA345415246F0
9C9A0FD7B318320DF475C8D74928A38C939631C0E140672C6445756E4E43CA8A
A6C934ED410F03261C60884073554BD0771EAE6A1500B64835ACD3A6EAA06448
573251000E28F83E3828A1197D92AAD16FC12F2F472827191B4CDE8CFD7509CB
B8CB2A4103D5F478A555F682861154A58F4D2D0AE3B28B516F944B2299D75F55
E04BB2283FB7D5AC1B23C3F46E776285B4A366BEB579CFD986F3DFE849CEE5B3
FCB4D57C732479EC3864D2C86D3AD2DA8588BDBEFDA62CCB52611B7E4D5ABE47
F3241EE0C7C6A83E5EADFB1C26FF123E5BB8ACC107D83CEDA9F030118D80ACFB
DADED5CFF4CEB79085BE0B5CB4657DF389B98DE9FE4AA80F52660BE69315C4A5
22FCE0589CD9AC1EF060831F7B4783DBA1CD1724E82C6D4D3640CA3A1CB631AF
A51A23677CF06047DEBD26DA522BF30ABD1E551A9276EA210906DC6879038B6F
C5BF776DB24668F0F4594572EAE33CFF75DDCA6120B1E37A56D2674EF16A9D7A
B82753DE8E1E44DB0175FB4B8AFEB87DDFF7CB3FC954223108D8C67C95335E65
A3E1E19BDE9B5E4F350894938B67F9B1CC008ED53FE6630DB0E7B5B6758FB307
6A05D18BF822C024E8DA87AA538D039F579F1C5D944E99D2FDC58F6E9F77C8A0
4B529CC5F786DC3BD70EB627D06BB45DA78C776FB038615829812909AFC303AA
FCCF7DA4C3674CF5F0F0C480F5D62F0389C379015E261B767BC6D18739D3F2F3
6EE30695EC1D1D635CECB8442177468B4A69E269481F40D0047638BF5A958B33
971B67D7364D3A0997082755899875059247162B6DF94E62408E24DBECEE6B1A
E4B2EE9A670000924D3BAE8E709882927DF994271B1F39BB29575F0D72916AF4
B387EDCD84AF5FA8B6BF01600E4A110247C66D55FD5B7557D2171FFC1F2BB3BE
CDBCEDE356AB70917A3A8D5D30A67EDAAFA72FA11ED89D7F8D0F56E5FD4DCAD2
6EAAFD5841E61026672144CE13EF3E99E281B0649DCFCEFD164D63F18E1445D5
56CE6B6FCCDCCD06FB24A4B8D86B3E2A7BBD3CBD188F380EFF135966EC1E2766
0E07094BD9601CF76669E250CBFCCE67905D458ABB63783411259FA8F20C1D4E
54DB5EC529C31C1BE2D872F535C4CA69794924D46D79D85C1900483E2AF731A0
15F843A4C6A0520FFEFD5BC53A4FB5B63D6443A71C8E752680636B90979E021B
190BA126EF79751E8CDDDC8320BD50E40301E494C37E7C3138D535BD2C97A1B4
C57BE94240885D73B91F71104C7E9BBFA05D22519C18BD5189E6702EC52A47F3
5F726327465599402536FCF214B5FFD53B2999095A760679B7FA56E1FA748BD2
E87C7ACFB8398545D12267B730803241878879561FD9EC66CCA27514836DC11A
15246B7B286B7F5A44AF04AE8DC481C32360C46A263559773F371D03857CAABD
AA76CFC2D29F1802EB7BBD4CAF04BD6669DE4CE548C93B3DA38BBCF6EB3A070F
F187845C9D8FA075FF9FF211764DCB1A5CCB8DCC659DE95B2F008660C5BFC68B
FB4578213173D6B57C2597BB7656081ED52085C3B0923E224D93239E31A782B2
5B29CF64AE8AA6AC1B561321BAC582AD3F7DD4F48C293E987EB32ED196D7F9C8
73657CD9513FDC81EE00B2D66CD002698B24CAEA31DA334C32FA049411FA1379
970EC33F8004CBD74D36D6A45060BEE93F8D17F6B1C1010F99FC365485ED72B8
1609D17A22933B888BF80B28D44A0B0CC7E98D034DB190C0A76D85F2A2C347F0
D6533C7EF0313F4FB7E47D5D9714F4C4008BCD7A7086CD7318352D7245CC4EA4
38C590B94E5A12EAD2881A456E7D9DDE398571644A6468E3F43042EA435CCD6E
AA52FB2F223B9CBE10C05619142F6B08029231D36AB5139AC8A9C0A9B206D40D
8B36ED4A55DB48796212EB7E441BBA4ECE8E15F5F7A0F9F1BBD86E6849E31C61
38CEDF2625B9B5078BC7DFC78D47307BC703EA50AA1036BA7E8C9086A3FA6E0D
8BCF38A6B00EE165DE3FACCCB907424DE8C140D6AFA62168B2EE21D3777D6180
A6D4B5D66080B72DF009BF9DE1FC3A0402EC89020015A839ED6803D1442D0F05
B8B2E6A9353D12EF5603F8C7447AFD5A9DDFE0A913FC4510F9379B59468F4FE1
58ACCD252B7FCB0CCAD0FF0F9B0B0BDE0F870DE0429BB44D5841E612C9B389C5
883DB576853B4C5E3B861D48DDF78C4B6FD3D868C945F7533FB9FDA7853018AE
09E4ED5CB2A3CA376E73339138EF33FEE7D38474A6251FDC9D60F6B7FDF4535F
F9A4C78D1542EB45C20EEFBAC4DEE4BB73F7C1A6B713B4F7B90655195800DD31
1D6C5DBDA4B87B365BB9B817A766BE679EBB17E99B197ECD360993D9F6631EC0
79E2D4803885A51B9F7FFCFCBEDBD4FA6F56B36C986FBEB9D7E5A35910538F9D
344708B9A46D33F808B3192C8DD175C1520B2D415415764E31A942B0E223208A
C79F798B6B30293478A637679AC7A2A004720E44EBE1C6C2EEF3145295F1A1F1
F77BEDA91ACF970CF37B39461454B28E280069828EACEB2A358AB5B6AAED9A73
A52332C3674529167B08EB0CFB4AFFE7F1DA23A6CC8B22899CB1E7D70F65A9D3
013FC550F7E5423CE193D3BEEE4F4CB92BAE0DEB1E5A58B2822050D9684CC237
5719EE951DF541947DDFFD63901F724BCB4F223814C9BCCAD32FFAD0EA618A85
7A90187452D29FE4C662552AFB1F69A1C8A4AC9919712793ADE5397578FFCE32
34AF40033C4448678B6BD524E6C10482865C1F844DEA29A9AD9FD39BBFA68441
B31084ED3E4449B6AEA11B7F74C6E170EBAD19D10217A286A1E387FC6CBFDFC7
DDA99CBE9055ED0D59F280E709ABECA3EA2EB523623439B07907D8141FF54DEF
E4FF086CB30877C56A21DC854F25C8000543D21F5CCB291891CF14D1FC9BC67E
092ECE37D3EDBBD23884A69D593DED5C1AEA03D0403904FDEF0A19FC15A78ED7
2373D93B0E71A5BFE74D2795B804AF8638546C990C187360F254D3EE523832E4
C67B34A7BC3315BB02F016BDE56501AEE4CF2F4A4D929C223664D8DDB84F7C50
6A00286C69375E9E0BBC49481AD7DAF97F22256D3D71F3ADA8F2E394AC340E2B
21458BF682F7EE801A9793AD0AD9FC6227B02AD5397C40AF5BA9E331D40B61E3
71FCD9188F3B58DD96B27FC3164152CCBE1AF4462C48448A1D7AD289BB43C791
2AD8CBBAE2D57DBB69A20D7497E1D8D373E379ECA40EC0149C14B8CF18FB2A07
D0E7F387B836DEF057820D41EF4806E015DE63103E6455B244B9BF3BBA00BD7D
0A1ACA19998188ACC2C8DA63C0C21677F9FC5A255480A63D4E69AC47E5B6F714
0EB91F8CA9A052F052869721295604EDCA1FBB77CB1B25C958069CB81D396512
2671A7139C0827859DCEF1026D7C274DBEFD9F5208B172F4C64D8D0969C0410B
203C4666513A0A74E7A788CA7D003A6A2DB0D35B0C38A64F174E02B4E8CFF2A2
592C88239467DF7B2EA71AF62C3B161E2D0DA571AFF727168267F0CA88D8BC16
0B149AC1758198E7E1CA604D2BC45D1791159625024CFF6C53289502F705187D
FDE89778BD58A93009F4D8CD63AD842B48A7AF275285DAF560741AD78A396B25
3ABA5C35A7A4FB06C46D98681B134FC314FC9F821D708A2302052A837ED8B3FE
2F09864C805DC78EEDEA287598A6AB0655A136B28D3137D9C460D65218C18542
3828E3F6C4FEE819DDA1802BD677D3CBA7FA101BF9DC1B69F1C8AD50B90A71A6
952F031D588B9B1F6A1B05C69E47448343965FE98C35FA9053474D7C43D62354
64BE6CB800A1B4968196979827BDAB1F9C27DA642FBCE6F3ADCA4458A159A13E
D62B0EBD561BE2573CCB184529623213D4C22C1843D4EB6FE0FCCF46EF81CF24
BD898F278B432AAA011CC06803B31E6F98467BAD8331C95791E040204B8CCF2B
33405627E16935199C3E0CA4425E0B2ACE80FC0C72893663258613D1EA9DFBD0
6D2F7DE668A114C1232C9F00F002E267451240036B397B2D4D7CBCE3B2023A36
8A31E1E7912CE1ED42F7E6A465B1767D7C4204F365C3467D90B4A546C39ED475
E3EB1FF476858E789C026A144FC2F6FFF030DD079F93AD88F1307D163AF6EA5A
F77CC1F36EE37530603D33483EC3F3444608187ED15457F1445D6984D0F863E8
F4C221655FCA96EAFC8EEA6C43EBDFF4E6D57459DB399D3B1D58CCB14CA1F0C9
D94819CA8B2879DDD497FBC6E6D1F4D3C204D59DEA0472DA71AA72632180302C
CE08F5DA2CCB08FF3E77A7CDB7CA7DB882184BC534DA4F297956F3CE393D32FA
521C2A09F71A0571B705EBE465F4ED2791A085DDA0E02E053F3F99423E84A9B3
6906B7EE0ACDD9FD44707F9A3CC0320C685570FA618212A0E169AEF94030187C
B4B9E68FFCEA59F0F2294BD8BC48842277527C6B5A10B667F3E02AA06A5F8047
5438C56E2D1466DBA3762C16B5E34A8A33FDFBB24371EF690D18773F91F729EA
7513BA7184756224ABC825B6B70973D69B280C9DF06C790B13A422F1B97A5EA4
625EDCDD9E080A2C5C2F2F11F04951E7E267385952FE3769DEE0914884C5A9C5
73D00B3427616700C095207E5710C54EFADE61D70AA5BE50E2308D1C9F22B4AC
0149615FD506B79E90F103413AA1AC740303F8E867ED1D8928679967D3B3C937
479CB2802EA482774A8911CEDE9AF7CC1F695A60E46B720F5F664063F71687F1
671DF739D25BFFAF2E2A74C23D026FEC6DBBBB960E77483A5B13DAC33A2E4036
93160E535E686E56E87E9E20BF553A17FFF8604A08DE631D5D068EADA9EB8412
796B710DC4EA851DE9992386B7B20C37F6EAA8AFD0710FC2A7E86A7FD112D710
6168B1E36BCA15176E70B946D9B0CE78B0F24EBD4E0D22C75F6816ECA9EDDEDC
C715FEBC2B3772FCDACD7133E2EAD62B1B637437694FF43E258E7438DE33E013
F26535D5DB32F29080113F6B71FC796074E51AAD747DF8E9290A39586639D8E1
C4BE5B06D1D5EC23C9A9F4E89B787E9451652534C465459D0C123B1489069B3F
26E733DCAAB94C390E5AB6D84C7EBE34DB63D19333A10DC8AF90D0211C3E7ABC
E28B0C715DBF27A9015C76B5AD3D34E83DCD47A792770D900626A50CA6041818
6B598D196C44EBC4CCDF7C7B7BEC124EF657016259A084CBF9114BA3564E8034
A1ED2E2F129FCEA68A8F29D121824EF0678F1C74371F17829D461CC7AC0015F2
DBD621FA962B5D9C9F87257BF7288EA50E9BAF4C7776435E4573431A08080B56
686F32D92E780FD4C3F96012F66B84BABEEF86C5EEB1F226DABE53884AAB1B66
E2FCB505E9F84AE52521C148AD75309FE96006854E7AE6557E258F733FD7D32F
304631E36947B7785F856244AA33B5B5CCE8FA93A71128B8D51ABA0D2D9A74D3
149CD6D46EB2200314C5FFA8DCE1F1F68F53B621E9E4B0EC39D72239460A81C5
6A398762F31A2995E219F6D7754C869D9D56D4E89FF0220B0AF1A72D3752F216
6FA68F15450FB4EA0EFA988FBD7BA26CA9280C7CAFD53D23A349F6163F95A3ED
6A67EAC31A2313625A93D8146011DBEEF8EF10C4E8885AABC2B1439DA434BF06
5CBD8F0865A545E92DEA106BF15420F14497E229675411D733E317978E7FDBE2
A9AD81F70086E7B6F357BF37D051388FDB4789A5FB4DD666BFB16995DAF0BF41
C6B2461E3C62632FE263357F67F975AC768988A75BC00DE540083D90BE2C274C
74089728FB95AAAC62083CDD601092BDF94C7669B605D4F7395F64287B3689E1
039540465BD32CEF41210C467241D16A4FB8511D3673F1596E8C2B08DA9BEC17
4D6244AD1CF66BF23716E1FB39FCB980502C5597B16A39FC5379BC43C1BFBE2F
926E9EB33A921E7498C63133D46087FADD5EEA766C0990CD6DEEC6FAB0BA6282
F97C28B89C67F18B39991752EC26A31279AD5228663335D1A250AD0841A6FC91
7E17E3843DC1BD3ACDC51E36E0A045742D76984017DCBFC8B61E779C5E8FC39C
09D66073588091F8777A874390B95512BFD6310ED5C0A4111A9E50BE66280EFE
80213B466DF328AA53AD8B5626A28D5648D39265434F63ECE3576FF068395729
32811DF10871CC9396A342125B7DFE60A8B1957E281EE6AAC04259615E805976
4950FB9BF375E9347FAB406A3B49ACA0A1FD5FD85BB349A109AE7EAB1E5116CB
56FE1F3E629EC975D1819977AADCFF70AFAA63B9E68D73F0A9A6E23D8649B77B
E5138C7C7BBE10F36E81DD333DCD1D6D33CC613CEC3BED4181DB8373ABE9900C
A0FD384647F58D9EF6C7EE8B6102A87C6E6FA50D7ADAB9AD22C404896C64904D
DE436F26BB2C0215A1BC2BA382DCCE3D7B9BBBAC08B12B6807B9166312F74C92
84F3A90AB819A06CD585CBD5002384015F8503D4C45AC7D42782421DDCCF4875
89907205050C2A11F8B9BE52D1CB4467D7070A5E9DF572DC77576B347A516E7D
4919D10BE41FA25A8338767585405FBA36AEC53EF7DA641B2D446F98F871205B
9092EA10D4340A43409FF243D9724FC48B68B9E5AF75885D2959A697DE5566F0
B964AAFD62640D7CDECC75E56FD951EDCE2A9F73F80B6C820A0E07A38D0BE4B1
6BA35397B69F9DCDAFC586ABE5469A288CE59DE68B75B7B4E94D92FDF34FBA5B
B610C3641B60188759D892FB8898CC8068E57D0FB78B701A3799C2009E92FDF3
0DFFF3D2D6FBA785EB4A11512BC325E98488016855322608AA65BE97781FF6A2
6BCAE0A1B54E1DCCCB1E8E186379BFD54EAF3B0FE9A0667675B57D81054A327E
479AB39DD7114DA403AB2ABD3C25D5C9A25D8E7996224E9BDD84D96A1380CBBF
3EA5B003C030C9E3CBF10D0C595067D88187B3DC80AE2AB5B14639F1B3DE133D
DE00DABC9347F4FA9C48A7A1190A7DF8FC3CD3B637CCF3487BC66B65E5D4E6F8
9A63191F82CC85B0CA184CD2AEEA65A3CBA66FEF8699B6DD9F02F65292D33D08
3E2236382637D457A26B20342F1929F95D8AB081F6C37A8F185DE7AD3B518254
796083551353C5F7AE88E86129277343F49F453A2A37B512D2ECE9EAB6264F69
5C0833D6D8332811C1B8315B785F2551D99E9430A60E2CA90C33061A8317DF2C
857E7379AB216FDB4414DD419C6C4614689E78CA9A055C5A153BB9B4E4E1B120
3781A6758F836875C624B5ACA8E59C15E267419D9AD65F02AFB654A71579E213
6C3D082D4D942AC03FF12D3B032CBDB966C8783A85DDAC33F9E51B4A5E39C79D
31FE5791B0E0A8347D5063491572DC77ECE1BB507252205BC4733545F01D7CEC
B5AEA5843041D42F1C3262318C4D736B10046CB6A89F3E75BF8568466F24540B
14F6FBBB0A553E2D9C9A641C2F0F46F70DE451E3A0DDC4559959CB8AD4FBEDCC
43893291BD6E83531F8026A8E6F9367940526C14846867C48FB8B84A47C38067
F77BBC83A8A4DF5833F7509E45FE6406B5DF3326FF8D2A06B8F99B4D0D555F22
015D16E0C7516F3D504806801C2A8DC8DA1FD346EAA6F16FF2F7F23E11316F42
2C282083CFA011A5861DABBCE5B84ACE65C3298F6261662FE0A4535FD89436D8
7555913DD08B951AE38608FDFE45C8E6C0E6F0FCD61A9268727C69312F97F7B3
E18D227DE8C4C4FB481743C26B973C3B2A78E614F60F0753D04CE346516B9F66
8936EF73086393B089DF73458BDA9F31F18879BFB5297A2CCFF281E4EA8FD1AB
07E7FB8DDE194B53E96DBB30C30567AADCDEDF72A93DE5BCD2558CA67CCF997C
E45EFA9C2F52A2BC7E712D01ED887CA1ADBEEE16BEC5D2860C26C47301C88EFC
9B03F30C1612FF3908E9A6B99ED334F3726FF2BB4E088884B52856C72663D218
9A10F3D37BEC2DBCFCF5868F8AE763B12239072BB6F5AD5958B239B06EAB8D8F
4968DF12D9A17C113A8604E9FAAE677D56D81CBE8A4F54B4AC2556B6C4D5F4EE
60094A2C0FBA62A244596BE4CF084DECEB98C643D16C3B71C3AC84E0EA24E2E2
D08C72660F5B99A02BFF9C1D4CA3218B631BB139DCC124AB2CE9CA532F46E601
E007936E58B959B4CCCA45F677F8F676D7B5C19F1A75D1001048D957B9A20D82
CF495556ED53550501B1911070953B8130F0B49CD395B63504BE2AFFF52153B7
EEB10B6B1B04D74B7E433BA72FDD1F106A1D66D02006BAC06183C1BCF4CCD1D7
38B47621E6641E72C9616BC1FC5F88DE79513A8AF9CD765E4A911113096B2193
081288DC312C441AF84179EF2966FEAECA9F67B237FB0D65D799CB8918309C45
65F599634A70DC67792D17367C77256271B2D5C0DB1E56F0E18C947D573E7322
1184676E8339E77D5B9DF455B866CE267A5A223CB1ED199915E7BE77FE01F737
B99D6C77E9B7FB6B0A9544903F3219947FFD7D89125865CBC42CB77A9C19DCDE
B053D3E4A35897C1D0A96C1BA06D544FA8587EBC4C2621CAFE0966E4AED1FD73
C8C86FAD1E2E2A1828D7A8140BB99A9993E4A6EC9DCD576C4B8E78171F252336
78FF5D26FF152162C896640955545437B976D15963FBE7B477122AE456E5CF02
4D17620AF60B16F5B2F4C883E2F018D5081ED73FDD0621FCC72C940EBBD5AC2F
3C4969862ED73B7455804AC671E649787400A26A56F57BBAE657EC57EC4E82B1
28325131A4ACB917E9904CBFEB5A6267113421BF64302CE2BFABF494E8DB9464
42E37809D3418731F34704BDDA3C4FC88C557E14BDDE39ABCC03240961040797
435FA337595EBC3879CE3CA8233715872F7C0B1FCABB4817256B5A595867B94C
D397063EA5E114CB972028B9ECCA21CD0F810AB69E9892A7DF9313DC12E0F02C
7B13D2808BE870A2EA77FD3833765916D6DCF86C432200FA2F6A7A7C29B1823E
D70CF151D7FAD921ABDC7FA24E6E82BC4326C6052C17BA4B331764B023DF4E49
52D3B70F42B29DA7B9A4720DCD932221049B87A2805B4437692B5F2A13881A48
60966C98DB1738EB6AC2B875259CD5252E06BA868894D0511BC89362226CB833
6FA86A78DCB735BEB9E600CA74B0D53CEA2975AB28AAC52677A50E28FBFBF23D
6D9793DFBEF86A8EF570ED6E7579CE60BEC1FD8CB85CC09D4C2809E0C0CEE133
7C7D7C871089A6E09A7B6A9BC0B8DEFD1DCCF41600E090452894AAFDEF74F9DB
3D4932D0B36D48F1D440086639F89D093F388E756B993977CE47EB4D076BDC71
AC60F0C19E5F2E18924425D7E8AB859EE1A4E7FFBE84F05D390750E7AA04B2EC
9BC8ADAFA92607F409AE03C316C183245F1B733C1745CE039840014BEE4BC7AA
50FC6424D69F93220B08BA394930854816EF6B851D5F9D05B73F05E181425DE3
1700651A41CB2705F5C3C20398488383EB8B7C1B43E0132930BC1A6C78499EE3
A097F115F0C5BED25F1B3CD6A975E1E8B5C1987E3BAA78E51C69DF72B51E6362
557DA52890C48D181950B9B6BC6C429E2CE9182C4164728F5E7E23FEEA395A13
87E62560A1D4AE0E1151AC58C476A39C3B9EAB778C65B0E1AE4A111D07DB112E
F72A3AC9E33A1AC8A134AB6B594E3A7FE76F9A5576561C3BFD75610EDC50616F
D349299D4D5A58EEBDDB188EA3C7454755BE4F8EAD8EDBEB3FA16C224EEAF217
DDF82D053ED17E529EE352A9A5C39B71BC51B58D8FA395E1C7F873C635892CD0
216C071B2AC21BDDD595AA0049642859B46624E35AE9FA4DC9387D3F0938F514
CD280E2C9F9886CA97E15AECEC5E288688361864261323327808BACF7593DC74
674B655E8C6399847A73E64D5C5A1E68BA6B26135FE566BC3B9FFA29304D9C24
74E44C1B59EE1564664BB1DF22857C146953B2BF474B3146D088129F275236A4
B4D9059D9AAC139CAE00A7C264A46A9F23C028424C84C7C3696AD83C21F26CC9
20B6291CC57ACAC7BC4CEB4ECDE50412828F52AD96189279B533FBAA2820A256
49FEE9249DE6B533317418A8E9670FB6BDBC4F5C265C14FB2063D0E9B9F65E3D
D4046C86CFD3460040F1658910AB6B41C98B68F814DF895BD4C62E9056BD7107
641CF02B0D1C377FC9A9D2BD6DECB0EA9B778CCFD5FFE3258F5E78897CFBC91D
A6A6A356D2B24EDBBA80443FDD8C754355E603E8F56D991D6D9F592F7D84184E
88CED2AF6922A87F22D4C3250B936C49E1FBAAEC6AB8D4852F5FF37F95988FF1
A62EDEF4C13EB70CAA5549D2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: Umj15
%!PS-AdobeFont-1.0: Umj15 001.001
%%CreationDate: 22.05.98 at 16:35
%%VMusage: 1024 55710
% Generated by Fontographer 4.1
% AGL compliant glyph names added by script hlatex2agl.pl 2005-Jul-27.
% Copyright \(c\) Un, 1998. All rights reserved.
% ADL: 800 200 0
%%EndComments
FontDirectory/Umj15 known{/Umj15 findfont dup/UniqueID known{dup
/UniqueID get 4040488 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
20 dict begin
/FontInfo 16 dict dup begin
/version (001.001) readonly def
/FullName (Umj15) readonly def
/FamilyName (Umj15) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -133 def
/UnderlineThickness 20 def
/Notice (Copyright \(c\) Un, 1998. All rights reserved.) readonly def
/em 1000 def
/ascent 800 def
/descent 200 def
end readonly def
/FontName /Umj15 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /uni1173.6 put
dup 23 /uni116E.6 put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
/FontBBox{50 -151 1000 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846AB28EDC112EE8CE6C67362AD1C7F635ED7D5931C716DDCCB8DD
0B212BFACD379D8EA98612F6EAED3EE47FC961EB1409CB45E7F58D43059EB7EC
A02477D2E7649FC57A75139DE1A9970727BBBFEEB65485793ECF481C806DE3A5
CED57EFCF4CBC96F3C2B1B59BD1621ECA2BBD67561234721FCE665723408E873
6F108BAE051CF53B602BBFD77E5FCC4351CFBB3E971F03D5EE7A8F611F5B3BF3
6EDBB356365D1D0B64F7191032726C5AE76F0008BFD1CCA161C3DAE4564C8FD4
9BF3F13AF4A3DD33607829AB7322EDC4E8481215002C0E5691E6E48CF2F02837
18625A31B78A151468A0E84A6BA0FBDAFFE6EDCC477CCD13B33EF806BC9B38DA
69AAE1DFE09FDABB5F32F1DAF08ABEE03B00ACD7B7D218279DA36E2AAEE7FCB3
1ADB85D691C4CF30D2F5ACA54BDAC32D8D337A1A37FD4E58B79239D84F8345CA
4016DBF8BE84099247F488F87168782DED6C344EDAEB10B1737BB1021CC258CB
E0673B4CA4E1CB62BFC7D52ED99F4A2EE88855FD68E836BF7B1CF58BFC108079
6E7DFB283EF906EC57B1F4243884CF49D2BB6E023756D0DEDD97E96B69891FE0
E9313F4B637949DDB55C8651D2647987E495AA60B276F0FCE16E485BA8BF9060
CAC33E325FA173F326859D2CB98E19BDE14A110F17EF0AFCF839B2EC36D799EE
28143FF17F1603066408663FDC0ABB95E0C51F5312784EF566497DF949AC722C
37B8B4EC9CD8EA5BA14E4E5BDBB8600EAB56F8038EDB660860E65CBEB091AAF2
100835AFA50291F9F9E8B0A999FF4B29FD77C4A54D82965234120D6C07293625
36D15D42DF49C81B451A7A2C31E85A1C0D0A02AE29BB7F02F6B526482E4C92E1
9CBC210AAAECCF5AF75E98303843E96299F2F11791877B2D3F419669ACFE72CE
8BBE4149FAFC0DD5539B930B4DBDC41DE42D71AE68A3041A2948CC1C449D0170
50E8D363A30DA44238BD925625FEF842C1D9FD3A6F20C94410023D09EEC1E0CC
26144D184F45C4B5909FE549B7980286B13572216A88B1580A230B921E780654
FC1E09E6E5ED42622680687BBC9F66D1BB8ABC08DB18D970F2F5592F1C0D82A6
50285817F8D593B3104D2EB9F7C12CCD92DDA1D6D421CF7C829F296BBB006B86
F8B85FC338EF261EE9BA3B696EB502A17AF2F7F914EB6FD75698A673F7C8C52D
263FF20EAE44D261D6F9FAE9941A3E9E078A3299B1C0FADE02B5705B5F8F86CA
B54A28240BE1F27C069F7654A43C4CCA40A41D855AB7C5AC99D5D8D37D24A452
E18E83BA6273C2653F3EE1E94786B9A3ECCC8B6562622D507B9102545D21855E
B694BE645BD5565743FCCEF30E3377EA7554AD911B4D140E196B92AE79D33457
761E09
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark{restore}if
%%EndFont 
%%BeginFont: Umj14
%!PS-AdobeFont-1.0: Umj14 001.001
%%CreationDate: 22.05.98 at 16:35
%%VMusage: 1024 57500
% Generated by Fontographer 4.1
% AGL compliant glyph names added by script hlatex2agl.pl 2005-Jul-27.
% Copyright \(c\) Un, 1998. All rights reserved.
% ADL: 800 200 0
%%EndComments
FontDirectory/Umj14 known{/Umj14 findfont dup/UniqueID known{dup
/UniqueID get 4040488 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
20 dict begin
/FontInfo 16 dict dup begin
/version (001.001) readonly def
/FullName (Umj14) readonly def
/FamilyName (Umj14) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -133 def
/UnderlineThickness 20 def
/Notice (Copyright \(c\) Un, 1998. All rights reserved.) readonly def
/em 1000 def
/ascent 800 def
/descent 200 def
end readonly def
/FontName /Umj14 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 38 /uni1167.45 put
dup 47 /uni1100.12 put
dup 48 /uni1102.20 put
dup 55 /uni110C.18 put
dup 72 /uni11AB.3 put
dup 74 /uni11AF.3 put
dup 95 /uni1109.18 put
dup 112 /uni1173.5 put
dup 114 /uni11AB.7 put
dup 116 /uni11AF.8 put
dup 118 /uni11B8.8 put
dup 120 /uni11BC.7 put
dup 141 /uni1102.21 put
dup 147 /uni110B.16 put
dup 163 /uni1173.9 put
dup 164 /uni11A8.11 put
dup 201 /uni1173.10 put
dup 213 /uni1109.31 put
dup 229 /uni1173.3 put
dup 235 /uni1106.25 put
dup 252 /uni116E.7 put
dup 254 /uni1173.7 put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
/FontBBox{50 -151 949 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846AB28EDC112EE8CE6C67362AD1C7F635ED7D5931C716DDCCB8DD
0B212BFACD379D8EA98612F6EAED3EE47FC961EB1409CB45E7F58D43059EB7EC
A02477D2E7649FC57A75139DE1A9970727BBBFEEB65485793ECF481C806DE3A5
CED57EFCF4CBC96F3C2B1B59BD1621ECA2BBD67561234721FCE665723408E873
6F108BAE051CF53B602BBFD77E5FCC4351CFBB3E971F03D5EE7A8F611F5B3BF3
6EDBB356365D1D0B64F7191032726C5AE76F0008BFD1CCA161C3DAE4564C8FD4
9BF3F13AF4A3DD33607829AB7322EDC4E8481215002C0E5691E6E48CF2F02837
18625A31B78A151468A0E84A6BA0FBDAFFE6EDCC477CCD13B26C7C8DC8DB2BD3
DA447D1854BC2D348CD2913CB2CF29F718CB3EB40FE2D18E44811621AC84EBE7
12A1BD317D58901052AD0F5A17DA0DF887083763C2E19F0E73B1983FFCFE6387
695866766302A87E9F72FC89761D0D3781A6488FC2DEB0E734276A24025D399C
1E2602E3915FAC4B4E6DF6410A641C64816538FD17D7C7D5A69BBA4D7A4C1D54
334E4DC5FA833D87505ED31F490FCEE76DD1E11A479223722AE181BA1B80ABE4
7366095EC761AF7E57DAD79BDC506F66B5AC9BF77AF8CAE4F7B3FC588B2E07F0
7D84F8F9A830ED5BD186A7EEDA89D3CD40CF6880A3007FBBAF0BD7186F5F7663
E0B0DD1698B951F605133ADF73CBA7DE351875F47C733167B2CB7DA20C340ABA
91FF0B16071D01EC6AFC0A5E3B6CEBF6ADC76581DF3D846EE8B18E9CABDC27C1
0D1601F6E215BFAFEA2520483402D0EF2AB57767BE7143304479813D8D858FD9
F209F919A884F4CF162643A8E0F76AB239F3EB41CE8A4A8442009C97D03FA547
26D9F5D70016742FD21D0C4724C76D20FFB6B597113C9529245DE8619B4AF7B3
6C7A563B57197FC2FA22A2F52D3D8F627B12E2DA803F0875C43D285105ADED8F
9A51158626EB675764E00DA9B11890D8824EDEDE715369B2678E24E6B70EEE86
4ED24CBF4C474209093984DF154C07D1CD2347EF7A43B2CBB3AB991C482BA48A
D4F318222D4D5A79CC8C8A9D0B4DC8CD3562F02AC99595A3F19F7D26D343806B
9CB13869652D43BCB9258E5AD97BF9F12335D375E883703F6DB868C99DEB00A7
F3F415BE855C2B1CE808F062C88ED2745B4D41E6015F29E82BDD4F52D78CF293
71C9C3B12C2D84BD397BAC3D9F80C351676386B73E5A9F554B2DCC973F6DCCAB
20BA91FCFB02C647AD34BB1E2254E1B9C75B5538D83E153345406B82BA907179
E5D71CDD5AC26E36D6F524DCEF41A391D27913ADA5BE78FF3BCCD69864C958AB
5AF84A59241212C7F033ACB8310283619DCD7B2D0158DB7E661717DF1150EF59
99F53196BE4163CEB8F0609A5E844CA78A7A21E795465C09C34766210A5A6760
19D0529B7475AC223C871847699F9AFB0FDDB8D5CD3BB475F3C28BEC527ABF3A
BB46DF0E73935052648FABB7A867FD292A152C8E4A681B82BC03357E048E461C
4C3F15AA96E745A5347BD73514E1E186F08F829E0C8F892584BA9A525CFA28F0
AB186DCAC4D8BC41184955F325D39A6DCE0ABF61C7A521BCDFFAE975297218D3
C377E58F7EA81F92E0C69F392BAF740A171F64F474D35C7DB635BEE4575B5B8A
3F4089BBCC4641E51B5A07574726C69A548707B325C32B7D3909513732F2D0B6
BA782399E33F27371B3C726F0453ADC4E1FE394F6BD1A6908C770308C2401C30
4F5DEC3160CDDECA8A5D5B4EEE2B6EA10551F268CC16A39BD843D9F0AAF189CD
851CDB50BEEDC26D8A48B0C0D2327DD36287EC02269AC806DD9B517920F183F8
6399299E60C27B2AC3F25B5EF3570C71F61B0A3C6945497DB3B5AC42E9B57E1A
1C92B66A3D94E0D009F5082431B502E1A3353AE76A96D266BEFE1D56CDF644FA
EEBFFE88969F485F010AE55E266D682BDC36DAFD0BE82B64B4CA887171EC5C53
6DD66B6C9CEBEA6BF169D424EFB12A1E2AC294EF009647427D64F7FA0DCB5A74
12144EAFB04AA1178AA71E7C59583AEC209CFFE901D93BAA4863B703DF4D76F6
F06A09FB86D03D7F562B21BDED947F684D93FCE170A0BDF82F3E09E8CABBD3A5
7D3F9D5E137EC86DBD9262B8F80C3C083870E63B37B90F784022254D406D9309
3BB4156FB0A1E16B4A266651E3D0B3705F162E149C1C4D2FBFDB1605255E3C3A
E82E4A02E78B20A64E6746928076443AA7398CE48AD3F50D37E52A4F4EC6D297
F4A8E90A784F957ED0F7ADB94CA821F0051AF53F03CE36174E0AC2E70F1CEB5F
00BB4516F0890A6D330146814D57A8163039A43DB3ABB72E564662ED3079D3B2
6F1C644232E2EC262A1B7C9CB50CABCF9AE63440C65DF044D5239044E2D2AD11
A5AB1540632E003DF4A54C0D242614A857FC0417DB979504DF6C8625FD190BD0
1A18DB07F74F548F41941B1108EDC1C0B579FA0A24EFEAEF7123D72C0E50ED05
1226E43401E9B2DC7A86E0D484441DCACA6A0C35D83BE3B7E71D7B3EF10900D7
A91D43D0205BB77DD35458B65783C2DFA9BB9EBEB92FE0F151C6DACC2FD0E137
0A269976FE425C56B90B5CCEA81D2BB613D9BDE2DD9F156FB3F902AFB7629E4A
AF90B111901E3239D05DD1BEE2344A7938E871503079C2E7F0AD15F00FD51DAF
DE1726A7A4CC9447BD3D52476AA393FA236830F87086813EA4DBAA25623FA8F5
B46F01012CC94E2F4F405B0CFCF5C01EBA7C8B3F1583F2FEFAC70CADB5AF585A
33265AE64BC4E23551EEB1E9A914E35DDAB0E6F825432257CD60F307B62356BF
CCA3F89BC98822D898DC7BCC146303753BF54910C58A01FFDBBE6FF5F4B1862A
19FBB5A2844C5D21E9CD5312C50397234F06F557013ACB3EEEC6E97299F6FF23
5DDCB470001F93D4D5A6D539C1117B8EE067E68A8E2B87872EF3D298DB82F605
47EDAF7CFA2789459F39333DE8B0D01A754328FC1D9F220E9BEA28E22B1378C2
74CF7B23C979C3DB00CBE0110DCC243545C1B5FD36E249F6FEFAF26D1B066371
0C52DFB68A82ABD61FEF328262CE7D79C4A6C6857E9F19B3CB077856F7519164
AC14709C1D0B1FC5E6E4F326332FCE61EFF359ED2F15E9BBCF0462828FC6D3C1
23CDA2EB5415387F6E86BF5A3DE44FA676036FE251F0AFFD79F60398F3D76BF3
7BB736B8FF8969A721BB7E736E481676F44474FF345F88F9BEF837AE87E9E023
93658215F3281B22D53872BD87E46D78B8EC2C8B1C94DC2226A24FFA6ABB67D8
747D8AEBF91DA1554AD97ADC7504C32017E19E94589D008A5289345B8BBA088A
AEB0477C0DCB108307629ECC8AA0034EB9846A09304B3FC06F60FECEAEE28EDA
7D1F5C97CA70FE59888E8EF8E17A6CA938CB0CCC5EE9B3254A688DFA4F5D5347
03D4571AC1D3E67F4B0AF27848A8011339BA5D680D7C5953F8067E4FFBB9FAA0
7D096C353B7B71E62A64CC3B99FB57A6691229E1E63EFE563CE164DBBDC62078
3AA1730D3DB9AD8D48313489CCA8D1C1D18310A002AC79E46404A57C116596A2
E8DED8923654F578CF55D744C049A4AEAF5BFEB6505DACACDF4F2F1DC8C4BA8F
E0F19B660257B3F304C7ADBE762C66F19584350D617B85A264E0F08E0C794D69
1A83DFA1CC9D3D6EF2FD097AB212CBDE0DABB1BB06B0350CE3B1F6940FD7DAC7
3DC688DFD4579A397D93934BB025ED65F3210D4736FB744A27B589A15CCCA1DA
38B592F773B86C0849B0C18D6C7A816B29C99B9453D585C9776FAD0245238637
0EC2E08B4D2FE50CAEADFC572634366BA84F133768FAFB69F346DD7ECE70FC5B
0498245D048C2B11E26D55FCD29BCE59A016D54EB43222A5EAA0C8F43F361D66
C46C1D5828FF5767F81846AF92723CA90C159C765BA488A222DBDBE69978FF56
CD55F11EC3D40C5BA56D90796034BABD545C5698E103170AC38559F4CCB1C40A
4AEC5B597AB18B8E2AFE5608AADEE32C94531CE030FAA7CA79A86B08387136DD
7E0E33C4CE0EA69E0B6551BC97C925A6E747BEBEBAF35322A262122A4D7D04CB
C6A9D5907B9613EEFEAE0CEA13A0BCB275CB29FFF72EC92DD526B9AFF35BFC1D
87B184B8083370487E254F738AF94CB340D2EF78D99C96AFDB998F922A72FD68
95FB42A3D38F23A863FD88ABA35D58AC17C3810FE0593912A6FCEAD291318ADB
2962388F4051253A78B9C4BE524A0762B1DF45C3B55252AA826ECC3F182C69E8
074713C156CD7CDB877690B97DCF98141D3018D8A610996422008789F6B154F6
41588696F0EBFBCE6939F9E02915791F121FE3A035FE87E9F56936F4019EF7AA
5768E0920C3BCCBFACC7356615C7DCAB0D79AABBF5FBA1C445DF82D5CB39DA5B
5F1FB27B47DD520442A96174F78B31ADE1F3600E0896B03CFE693B576FF7540B
8E744459091F4F71514C0610671A68D0127A2549799928A4D5AF442301AEC898
6418FCB2DEB3910CC58C4436A5EA94C3A04F849C2ED4686483F7E52B10AA2E0F
E1F10677B0556E756C8E5F5D8B4D5CB833B222516118F4B9703BACD261212E50
75EAD79C4B8267B322E557506994B4F4DEE620E713D479F19C80ED3A69C98FE9
315C251D0F0B5A25EF8FBC35ED745DF70A2FD7C26249613D2CE96BCB8B5D67F7
FF4799498FA256A6271F032039F412F7E1085A0D622E099C7A4832808C610A37
D5F88D8427B8E8D58F341CCCF89084ED14819B4556892D39EF35B3F26FCDB97B
8178C77F12C6BCD9617F7923355B4427A949B0B6EE62D58F3F059DBBE29BED09
D73DD041A47D54A5F722B77E23E7FB761EC4A10A6D1C8118BEEBC54FA002281A
E3ADC3C5EC07C07BD73B291E5F7040031A726B60CA58B05E8304A43319C53E7D
0ECB1B26061A8F0E46C4E25174C970D7F033EE8AAC89EA012DC59D2CFDA1FF57
CD55C745029914E6D1D559BFB74513926B732F0588DE41954A8193CF7BFC4FC1
59A3DBA56F79C7242DB9BA332444ADBFFB8EC757BF2FD8195795DF9802C6FF51
D1E08EAC2E6FF41623BBFF864627781CB563378D8C5C4B0CB738E12BA53A670C
7B615A945EE7440BFA0A38FBB91F21351232A4409292F1FF89AFCE1EF1000425
4911EE2E28FF841ABFDE1E8C69692BCC2389AC3BEC279F170C71380236C4CA79
9A68653A2BB361706A51960EE9B3BEB61D2A8A2E83CD018885516CFCB554556B
A6018432E328E533AF3AEC57F2947C7E40A57D4872EC76D09FCCA36A57D375CD
2031AA14906C28C75A5A4FB96A61B8F4415F41DE86D2C8231BB0035A24A9484A
77A89B7EFE1571BB537F763A3818A46B69096D261AE035F02B41A9FA8A0E1096
F402319AD5C16B16BB5AC479AD170C7DEFEB330D153025FA6A0AF9BCAC853AEC
24C86078CBE9FEDEEB14BA33EFC6773CA245ED8983D6C83E7EA217AC6C1232E7
A88F3401D41D8F7D367A21969E8AAC06624A0A25650F5BC7ACA040F20C486337
680ABAEAAD15FCC0682A8FA12508B7E770A899481E19FBEEEC89B2742F91844A
B37BA5567886FE16BF9945F795A614DF238FC720BB106ECB1ED564863679AA88
A5FA163A96A0B05D36DD892DBFFAF1BFBBC8846A0DF4E81ED0613DE48F13164F
8D01FDAA112092A9B4CFB4BF82F0DED24D0AD630A316B187D85CFBCBB57A6167
89412249278FA7F9E434B64ED66977BD678B6A848D5B66B7D5C1CD4EB5DA50D3
884900DBEDD28082EFCFBF2166DE577DA95D4B2889FF6466607D7FA499F1C01A
5650632293EAB619956B54348B41BB6DF2B4E2A1F6E6817F268C515D08B6B538
6F6F3C39
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark{restore}if
%%EndFont 
%%BeginFont: Umj13
%!PS-AdobeFont-1.0: Umj13 001.001
%%CreationDate: 22.05.98 at 16:36
%%VMusage: 1024 54575
% Generated by Fontographer 4.1
% AGL compliant glyph names added by script hlatex2agl.pl 2005-Jul-27.
% Copyright \(c\) Un, 1998. All rights reserved.
% ADL: 800 200 0
%%EndComments
FontDirectory/Umj13 known{/Umj13 findfont dup/UniqueID known{dup
/UniqueID get 4040488 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
20 dict begin
/FontInfo 16 dict dup begin
/version (001.001) readonly def
/FullName (Umj13) readonly def
/FamilyName (Umj13) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -133 def
/UnderlineThickness 20 def
/Notice (Copyright \(c\) Un, 1998. All rights reserved.) readonly def
/em 1000 def
/ascent 800 def
/descent 200 def
end readonly def
/FontName /Umj13 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 39 /uni1112.8 put
dup 60 /uni1161.11 put
dup 159 /uni1162.23 put
dup 175 /uni1165.4 put
dup 242 /uni1167.32 put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
/FontBBox{53 38 994 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846AB28EDC112EE8CE6C67362AD1C7F635ED7D5931C716DDCCB8DD
0B212BFACD379D8EA98612F6EAED3EE47FC961EB1409CB45E7F58D43059EB7EC
A02477D2E7649FC57A75139DE1A9970727BBBFEEB65485793ECF481C806DE3A5
CED57EFCF4CBC96F3C2B1B59BD1621ECA2BBD67561234721FCE665723408E873
6F108BAE051CF53B602BBFD77E5FCC4351CFBB3E971F03D5EE7A8F611F5B3BF3
6EDBB356365D1D0B64F7191032726C5AE76F0008BFD1CCA161C3DAE4564C8FD4
9BF3F13AF4A3DD33607829AB7322EDC4E8481215002C0E5691E6E48CF2F02837
18625A31B78A151468A0E84A6BA0FBDAFFE6EDCC477CCD13B26C7DB74256D65E
CB947B43BC73F899820B3902B104B53733106D86A4C6EAC675B6A422283747AF
CBC7C8F6DF0F4BE121A970781FA3D7F9CB673871D5BB15D31924D26C576102AC
D913C7F6F423A7704CEE3AF8F2D3E050E61EA486F651093209333FBE131E3FA5
F7D5D50C2D78C71279FBCDD062F64C8CBA8E537E2F110D6D15A66BA92EDEE8A6
0130A0BB3317C1CCF7E2A6A0091CEB034D9A2E100BA82FA8BDF898C4AC4F5B55
18E383D2FB414E60C1B15E8E1587AA11C6DF5702A0F9C26D5D40C0CA7F392500
1E64CFD0FB36A6BF99216652ACBDFFF9C56376409E506EDBFE9AA182313D20ED
AAD93A07401045B66FEB01F795734A43944A722797DFA6D5DEEBA86DEB42D52E
C3575FA9E198685DBE5378D15F1D83F7E5765921C143BAC8DED551D88E1AB666
0B85086BD6F7B4967B1C4DF5780A834422F36364780DF3445C3177B8EAA8DC99
37807480F31565A3149AD56CDDBF4F32934CF9BAEC2AF8A1443002CFE126DF21
47CA206291EBB9DC1C3B8747E78F6196B016EDE3DFC99619792960C82E025165
E3CE0CA6AF73AFF1540A19F33AE214B22667B11F25422866334AE1CCBE5F0A36
974F5B315E890207E696BBBA9BAB8DEE17384ECCF92F60A6861EDF62FE44257C
40F5F26C789EBF988091D336AA739FF4D08FF6253CDA38A091B13AB77EA2F13C
F14C5A986BE47CBCE5B2A67A1C1C55B4A06BF9913C1BAF5C0CD07BB266922B3C
5021B77E02E23BFAB1A8C08FC6B8D4FCFE0B0CBAC225191D9B50AA0C8F237BB0
D24D75C361425D6AA1359FAFA82398E1EBA8CAE2FFBFFE70FBC5F6632C40F2A5
8B132053D43B13CA81B67335D574D3C1117A4C4B89CBAEE519E15595E53C5E95
3ACCC74D25DB110D321CEED63B400EA1C28AD22D342016D1C381E121AC688EE8
3844E69D4398553E5D865A0D25D3A6F629DD48AF2649A4B68013F198C6D438E9
B9B3F379A5D5F8DB05E2CC7063141631289C46E62599AB2695311891C9F675F5
23355DD2C6B3108C71B039D54E147F744D308D94A526E99535A73C14BDD7972B
5BF0CFB701625B8E73CA1A869620A2E7A70484748D3B901B0423AC028E55D973
57ED770C7D8FF96CE8A5C8F90F9BA70DAD1F893820CAA7D681B4651C5CE679C6
5029FE46BAB13F33BCA6D08ABDCE6217E1F3B7D606CB351A89436D29D548D3BE
CCE1A300AADB976A283E6ED5428B1CAB68E572EF9685EA0A6F8F05D9EDE64DF7
2F9150456D227EE5CD879BE18B5638E9AAB8558B23B74ED541A659EF68324AEA
6584A627531C2E78C02C3B6EED161124275B73A5A32216FF42439250D39C75B8
18324F990E77B6C4BE1C39B7DAE264115B87D8A87B96081679ED37563E1A9EB1
51B679298E0BEE11B5DE888BB7BE15691A3E3129CDCBBEDCBAB9E542F7D73660
6BC2868F8556BA808D91E446A386A353B30F7368DBA7AE5F180D7B9EB8BDD615
9F82DDACA0B299CEE7FF80AD936539C79EF8D415F7166A09B5F1B966CF1C2A68
9210C730457B3DAEBFEA9F7B354FE4E8E3CBFE435531F8268729CF044548D126
AA7CA6114A89CAC8D01613E8E95240F1A33EECB30CE1BB01CA62436F3655004E
A8723D006FCB852FB3DC34BC1432697547F4422A2663D352D07089D508469B8D
46B3B61788BDE4E6C87C743B0AE5FC489B7C468E06511CF0F119F64C3D769849
84FC8FE90B3AE365BA56059A39D3BF31A84A73A67C8A19904937E07656D13B57
FEA428224F19FB38CD239E430B48BFEB77CBF602E44D31F81CDDE477434893D8
3B6FE225566D19B68D965BD8D71104A01470F3CDFF1E2150AF1165186DAEA87C
F61591ADBAA8F78840BDC64502D36F0216EC6671C2C2FFE2C59E074C1DCBD228
A1082B2BE2CB68BA6EC744040EFEE133F1FA9075CC302DF0189E4615328FE557
8253FDCA0DE8955B8003D23595473A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark{restore}if
%%EndFont 
%%BeginFont: Umj12
%!PS-AdobeFont-1.0: Umj12 001.001
%%CreationDate: 22.05.98 at 16:37
%%VMusage: 1024 58100
% Generated by Fontographer 4.1
% AGL compliant glyph names added by script hlatex2agl.pl 2005-Jul-27.
% Copyright \(c\) Un, 1998. All rights reserved.
% ADL: 800 200 0
%%EndComments
FontDirectory/Umj12 known{/Umj12 findfont dup/UniqueID known{dup
/UniqueID get 4040488 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
20 dict begin
/FontInfo 16 dict dup begin
/version (001.001) readonly def
/FullName (Umj12) readonly def
/FamilyName (Umj12) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -133 def
/UnderlineThickness 20 def
/Notice (Copyright \(c\) Un, 1998. All rights reserved.) readonly def
/em 1000 def
/ascent 800 def
/descent 200 def
end readonly def
/FontName /Umj12 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /uni11A8.2 put
dup 9 /uni11BA.1 put
dup 10 /uni11BC.2 put
dup 30 /uni1100.8 put
dup 37 /uni110B.9 put
dup 38 /uni110C.9 put
dup 52 /uni1167.17 put
dup 104 /uni1165.42 put
dup 105 /uni1167.28 put
dup 137 /uni1112.11 put
dup 157 /uni11BC.11 put
dup 167 /uni1105.16 put
dup 169 /uni1161.5 put
dup 179 /uni11AB.12 put
dup 190 /uni1163.9 put
dup 198 /uni11A8.15 put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
/FontBBox{53 -151 995 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846AB28EDC112EE8CE6C67362AD1C7F635ED7D5931C716DDCCB8DD
0B212BFACD379D8EA98612F6EAED3EE47FC961EB1409CB45E7F58D43059EB7EC
A02477D2E7649FC57A75139DE1A9970727BBBFEEB65485793ECF481C806DE3A5
CED57EFCF4CBC96F3C2B1B59BD1621ECA2BBD67561234721FCE665723408E873
6F108BAE051CF53B602BBFD77E5FCC4351CFBB3E971F03D5EE7A8F611F5B3BF3
6EDBB356365D1D0B64F7191032726C5AE76F0008BFD1CCA161C3DAE4564C8FD4
9BF3F13AF4A3DD33607829AB7322EDC4E8481215002C0E5691E6E48CF2F02837
18625A31B78A151468A0E84A6BA0FBDAFFE6EDCC477CCD13B26C7E60DCA69192
D7698E1FAFF2784F9D1A4339E2EC2FC7A6A6A48330A2AA6416D403FC59B06590
2B78865959F7E2521F1BA0616312884E9E8D7A37DD651D99799444E90D699300
E2A9A5C07BC9F3F7ED29DAAFDBC8CDECFF0FD1D54D924EE1D84ABF9C379CCD8B
EF15614FDAAECEC283356CAFEDDDF281E5487EC85236BFA4D9A2DCC27D34FBBB
A0C3464070B401978431CCEBAE9113C477197FC634620BF01C1D38C519B00504
138D6BEE4EA7E490155BF03A84F0DC42F952429F3FF012F297E03E2D9041F7F6
EEDAD2551A4C484A3869FCBBD7D8FC9BC9A7938EBABF491A61ADF484B04D8C10
94CBAB96EE40DD983536F80636D6B5FFB5302ED61904723580D78094F93EDF28
D317E2C27D6AF09159D46CC0D442C15464F76FF4DE2D253D390920B2656F4565
D62ACA8D32437C6202680526BD475EC5B504C042B6D974D3FA0BE19EEEDF465F
1D328C947B52347B116A62BE801C0BFCA719E7B324DE572E5DE7B82BBAABDD0D
9247FF7AA854D51A260BE0FEF20D10866C1F637F84C62960E0BFFEAA93458256
930EC9C9A26F701A654FA8028E9ADA783613B7296AE95485098AD3151E49E6E0
069A300F4D2D760296210338DC5AEE8D1CC14A18E4F2A1439934E5F5F81E9185
081DE0A79095AD5AAA43D3F494528CA4C1B9EE88DB09C94C69D4BDDC1E461FE6
4A0B9BDE7504C63B02BB590046EB033DFBE2E387A016F253D6B2B9DC72800A79
D133C3A487C9F0F8EFA8D8E6E191FB00533E5BB91BB10B01E5B2AC75474F19C6
2A78FF1B654AA247A009EFDAECEE7B0B3A247E4C98324C6A14E75ECF0F1C3C01
0D0F1D5EBD3DCC576F1968585F21B78F6C61D5F52EC001849C8BAABA10A682B7
C1C67F3BB83C63FA962F62088674E1A39F301A98E37C2B188C1B90F2CEFD84E9
F655600B7BDD999ECFF8B98083CBDB37CC3684F53D9C4878A5B2B5345F5C20D8
598B2E3B62B384AFF7E7D6FC575A88B49546BE1940EC5541C6900EC869F6446C
4F0825E70C31404B36A019FD264758EFE78B05D5EC1266496A423996A1B37597
4E347EF20D68515AA9F931867CCF5789C17F5655F33DD165291AD10963A116DE
0F3EE2B4DC2FEADA8D75E1627881589E589EEC232E5A1E7030E211DAF5B4E32E
9C46D56563CAB180BC29555F6941D9B71CBB44C70C38D5676CC1130152606C1F
9493198474BEB93A8BC4D39DD40136C97A0E9349DB21311BC7EC2D489092F1DD
03AAAAB248DB3F8992716A4264FCA01DE6576B5232103C265260BABED602B360
E5E2ECC3B92657213BB57CB8A105295941575CA93D5906C61B182D057A1FEE89
5886EE9D546FB22C38047213AEDC309C0E33F877E84917BBD1E5D37642FF2FE5
01985DA3F56D4031BC3D1DA920FBE3B5B5510EB3A3461091DCAD66CB8BF93C71
F3BB6B422FC3F5E989A6F77FCD480B5F4CAF61D0B51B44AEE42066BE7196B2B1
07596A182D385F8C4B0738506AEA4147F71A38173C6CCFE418C3145182D046A0
96FC2372C37207551A39D02762A5C4F1AAA5BF1771B33C640109268A21B249BA
679D58964B4CA44CAF450A6C757D8D73BAF68D74E0E2C645F0D614AEA1740B56
78E534BA142CD358BF561B67612213C2AE1AABDCA770990C0E4242EBDC5EF033
CD33B0C4314DC8C099007AEC9BC68948F82842EF3863C1538ED2584DAE496997
3522DB6AA1A175589AF9ECC03034D21C6CA7F267CEA5DBA4C7039941AB606D8B
0DBC1418DD8B728CAEA17F71E57E7C4F07F1CE66FFE64C496CAB2EB40A9E0042
6C4E8F3C56E885DA94F78E2EBF79E3BFFD7468DF04E2CB2E4AE51E61F98EE74B
C9078A26216D397E3ABA5BA4FBA908A14F93CC5C1785D0C058B0267979CD93AC
091893E79DBA7A7A633F26B8584D74D30BFE0B933B62EA19E4356C67E042F310
95EA9DE056C71206C20DB3538F6746E596B3AACA73CF6500D85A28C084CE8C09
FDFCED5E1E8AF86CF3CFBDD5763634CBC8BEB40E84CDEEB210615DE70334D05F
56B20ECCF384218447F3A37CDDE0A6617E3D34FBA8D3761502F614F16605ABD8
2CC54F6FA9696CC3097015A17045C6C142CABBBC18A86723F8B65D56DD9A963A
E1681DD20D678EB176B1D05E5D2DE6A618D138F14B440E5023381AAA666A354A
86F4998F0D7643B010091CF02DC600A01DA3BB55FB3FC62D066D32027A0E4B5A
8F66D6A58479EA3345C40258F9B367F55DB0F857342F6079F46F8FCCC60DE87B
2A82757920C29E19970726BBA397EC3C8F1E15E45CA10734BDB00198DEDA0686
D06AA5691C989881CDD58B6E4272B336E54A833CFA6A49D2FF89EFA5F5B356D1
646B72688D3637387A20F6349FFB88BE6A3A91E12846395995AE14C7924F4F1C
7E4F8F04107715754152692083DD9C2696C59F1955FA3BC262AA71C17D3908EA
E12A7AF6A383CFFF6A69EFA84602E85E7B855833AA2A9484B30DFD02E172DB68
1261C8E98F16BBEFF35F057E0463E5331AEC565BF2915855ECACAD9AE0103741
858EB0A79B8CF906F4651F68461E2E824106EBA563096AC9FFF055B087C9B5A8
A18A5ABFBB06D8CBC25CB43AADF68459666BB3CD327724E45A7E3F0C209D7564
9A7B156E2694ED7B94EA21BC42C22C38F8D6D964A6A2F3B8A627A775D8100E73
CE3DE0D1763BE3A6BA1CA36B42CA5BE1773C60275078558FF4497F3F752B9742
30C2D75312B71992F0898F40856C54A6FC54C23D6BDB8593E06675BFBA338526
AA787F7D2C1A85BBF90702BB3A9CF557894A7925025CC164009D367B7C24F39D
606DBD07474EFE2C6766538748C4322E3B3A38F8F37C09001B1E95BE5099A2A4
3A4B3FB655FDE85F63F2685B848523A614383780D3766E25A1C77C4DED67908A
C005D3FE4EA9E2D9807589804A64FEBEDE7243037A4D37CF5911C93CFBFAC16C
862EBA16A354D87393CE7717C956A2B5B77677932AE96142CB8AADAFF98B03F0
7F18ABA9BEBAA1DDD461251BECA25BB720140DD41EE36253EA4B906171CF60FC
CB90B3E034AAB25115A5047DE62E47C04E275E97EA80BDD1139B2ADE91F7820C
2039F3838E00B490D6ABC5DF301897C15DBAFD753FF10985E1F7651CDF3BA93E
26E5825ADBB9784732DE75B61F706B76F6C55E10642E6DFEAEFCD319C1B23FB0
A259E265C2A92783734A39C36A823E3C08832BFAAD8521221108F2A75469A47F
3046557403411C7A16F6D599D732C3C204754A3021DE7E54ABE45F6C19F26F54
143B38B0EFFBFBE99096F7B9226FC110F511E3E35FF093E597E11663471A3F21
B41D29AF7070EFE8279CB9442AB0DB6714154FFE27DC34F3C88DCDE902FD3BFF
67255F05F2089FAC7F15353AB51711B8EC2C257530A72299533A2F516F08EB86
94583AED9B99AAF9F429FB22B231B5C47D9EC8D38C826E5157A54EBC2CF719C5
19ED06352C36DEBB170075E06737C013961220A7469AAD6200218E63BBBC0F64
9C91E94585B6CC1B96F5B4BE5F2CE5BDD170408D11B9A8F74C94F1AECC4A0CD3
38295C16F547A3693425292CD967101C30BF8A85C69A4FF5F593D23CBF1050E8
D2197F4C10950EDA2FAE34C3D2E4D16C89845B2C46F152AEBCA0F34AD8F68A3D
9836F620A8C23004CF63CE77C6B2CF78BAF6372F8E5D81D6750AFF74EBED4768
5F3E69E8CAC9CFE2DAB4747B67E5626336EA67FFF92B4BADA398CA0683344963
EA6074613E4B66F7A6C9B0A80B53CF307BF54C8765CCC06EAE02D0C2C7089A49
D14DC390A2B43B548712BA3AAC89C8D876CC398985F8DAAD2FBAB41EC68F3CE8
DB7DE598F220147D9C7C2E09F94BA5E78B0E425693F94E1467ABB10237F0F4DE
7D2B23AAFA39C60EE153A044F3CF91A5DEDE6B55EFF5F829CEC95EAD372FAF2A
ACFC3FFAA0AA5F91C90DED8CF9B4F8C533FD3D9DE34B9F7B3D41A6575901AC95
8D5CD99022AD39EC7DD846E3F5CA9E4A00F2DF2E15F35EBFC7F5EAC7E440A169
9749E1B4BADE921AF78DB2FA8A868E6205EA6EA6E12C6C1F18BAEA373DAA37D6
CD6D95DAD24FACF5DECF18F125F2E694BEB693DE5B83052A3947A20E2A4F62D7
89E1D5665A626DF14893A47E4922187B32D9001DE95A719E58DACF4339B0F1E2
CEA05D23A6DB860D1A519DBE8ABF55743FD428FFFABD7AD059A5C4BD3FF04AD8
561D1A625AE5846B7173DB18738A47DEBD354D381131FCB6AAA5A5A137CAF7CE
332DCD0A0B7FD102A35EF8FC2640AD8D14A49B3008ADB9662378AD053AC5F71D
162E3FFE8DC817A52ED0C6FFB14182F3680CAA552F0BFC9BC45BB82D95409995
D1E0926D44AF533383832776DDCC093B31FF655FD4407284FBEA08775F17976B
5071DE819CE3DCF07C422010C20698AE29EA2B6441
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark{restore}if
%%EndFont 
%%BeginFont: Umj11
%!PS-AdobeFont-1.0: Umj11 001.001
%%CreationDate: 22.05.98 at 16:37
%%VMusage: 1024 61929
% Generated by Fontographer 4.1
% AGL compliant glyph names added by script hlatex2agl.pl 2005-Jul-27.
% Copyright \(c\) Un, 1998. All rights reserved.
% ADL: 800 200 0
%%EndComments
FontDirectory/Umj11 known{/Umj11 findfont dup/UniqueID known{dup
/UniqueID get 4040488 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
20 dict begin
/FontInfo 16 dict dup begin
/version (001.001) readonly def
/FullName (Umj11) readonly def
/FamilyName (Umj11) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -133 def
/UnderlineThickness 20 def
/Notice (Copyright \(c\) Un, 1998. All rights reserved.) readonly def
/em 1000 def
/ascent 800 def
/descent 200 def
end readonly def
/FontName /Umj11 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 14 /uni1174 put
dup 95 /uni110B.39 put
dup 127 /uni1109.1 put
dup 134 /uni1112.1 put
dup 156 /uni11BC put
dup 211 /uni11BC.10 put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
/FontBBox{34 -151 999 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846AB28EDC112EE8CE6C67362AD1C7F635ED7D5931C716DDCCB8DD
0B212BFACD379D8EA98612F6EAED3EE47FC961EB1409CB45E7F58D43059EB7EC
A02477D2E7649FC57A75139DE1A9970727BBBFEEB65485793ECF481C806DE3A5
CED57EFCF4CBC96F3C2B1B59BD1621ECA2BBD67561234721FCE665723408E873
6F108BAE051CF53B602BBFD77E5FCC4351CFBB3E971F03D5EE7A8F611F5B3BF3
6EDBB356365D1D0B64F7191032726C5AE76F0008BFD1CCA161C3DAE4564C8FD4
9BF3F13AF4A3DD33607829AB7322EDC4E8481215002C0E5691E6E48CF2F02837
18625A31B78A151468A0E84A6BA0FBDAFFE6EDCC477CCD13B26C7E66F1D4479A
EE82D772E4804BC78A0875F474DA69E1440BEB615181842C553480C79331F636
E13BCED1E7EF04DFE4E8313B1C35204D7A7BAE6B6576085B039BD1DB8FEA0576
DA3B91ABC4DD9CF7728AF49A6EA139D1F20988583EBDF38A21CBCCF78F283876
E056F07F382596E6B98FD34AC2593C02B71B39E5319F69CFE0BEAA565AED5D52
5BB3F2EA92D6D9E0612432A08A1532333E2B627A7DAF6F6E94EAF9124EFB1B1D
5319361C722A183B78A0DEB9119BB0F6904C51495A659ED22DBB3AE774783650
F59A037DED1F30440DBE02AEC0C26BA8B9EFFEA35B532BCA16C510BFA34CA167
86F6245A907EF33BD81D8368D3E38954279E5FBEE916C87C5C61B1A2CE0A7679
A9F255ECF11DCEC4A9C3658E9142859DDDE0C46F786BBE3BA63DEBCED165D02D
8281E3E3BD1F2A052185B228936A0C7D1C17D683DF998FA5B5366ABA34B84645
69E7AE37359B7E8E1EB09578003D7F255D4A5B37D2B1178BD882E77D1781C756
4D4A25AEC9CC2B0070F2BD139495117C05B08EBF4FE9C9D7221F6DFE16C0FA6F
54A7F554E958159496FBA8BC3E3BF44CD37BF74FE377BD600D352ED6415D41E3
1688A9E0E1C24E193E10EB20C0056F25ECAE9172BEE6CE92EB15D721B336FD7D
CD4B0150BABD5C00C2D7D6061EB12D641A70871110C71F98601630776EB4481C
80708ADF96DED97BFDF14290907D820491B9FA7CFF6F898BB56EA0AFE6C59808
A2C1A5F2C02168540F5FF97384C8799C55818278049309259ACF4A6FF91181E2
623D43D9992FAF4DA1EC91EE37DCC04216D0A615CD0D10F7A1111E0E0BBFF8DE
479BDAB1855565DC94B95107A00DDF1A0F34614D6DACC74019553B5579976838
739E92BBBEC051F97D4D754C296685EBE34F1284739EE026AB48104CE885378C
B43C8855546CD68727714EBCDA6D65B177A9E9A35282F30E7A2538DA8D934628
C412BA927F1F921BB2F4E8EC6650B5C58988D20E246686264608E38C36245E4C
A27482760E0D4015FA5B0FD95C78937672F3A05F20119D1AB6BD34BE981385BE
C71DA856EE2B6E5967CDF27DD2553917FABB823A35349D8D923BE967228D1C78
DB7C3F03780911EFB542923FDF1BC60A719308824451994645148F1ECA353AD0
7C90E5EC2ACBE69B680FEE0E4764D7BCB9F2A89283600786AA5C4E8F632319F3
7D5FFA9791BF8B072D6B1FCF33D7EB5CF886437BBE02B26471C1614FA8961F6A
CD08392F2CBB68173219962F8F736ABB8CD0217757BBAF6FDDF69B5E466EA1BB
0E4D013C9426ECF198AC9AF7EA935B9417E6EE8D8D8749BA5FF007897751766C
A527F67098F3BF58766BD957C35C6C67EE777D911F274D06907CFE0AA39B843A
F3DB32585C4C710513D834C015C4437943E677A9EBEFC6EA558F511F76BA4C99
20253C2D0AFC9A6589CAA51A8ED8F484A90A2B4F3D9188E92EC9131C9E4C5AF7
6835A39C4D25296BE94F2B2CB8DE09F817B4E7E0CDE010944CAAD1F8D1435EF1
3DE9FAD8BFC25E4E93AF550285DA9118CF7760E7423802C8B9F5CB520EF9801B
D8EB0D2210A053DB4A54A2AEB7F7ED6B7772A18CE7504D35A55EC51D124FC6F1
D60A344B9ADE466731B026B6848B9E7FBB39071E4DD4CEC36F20AF91635F2A0C
A455301D496A00F83AEB649049FDB66BAAC20C61DB60A5D2F8DD9DC40B8155B8
F456CFB8A6DE39047015B1740EA3FA60058E7603E71A1A259854F51D3B81A296
79D97166114495B2E4A6635792B20D728AB25ECAE203CF9752082F42CD7B0906
B04040DB5EF9EB9219FB8BCBD923ACEE552D0F7C689B6E4E35BD973E0CBD6A3A
E422332E5287F7A43D0653DE84F5F24093DE32ECA6C71A58E99272CA7BEBBE36
49A63BF627B096AC834822D586FD5D5B7AC81D5C9A2B564013B29652260D1CC6
00A1E01F94D869B259DD93EC72BF627195C0304180209F5001C8BB330806A106
E125672A6086BA5E7DA0EB5BBA17481BD8DB0FEFB7F0318B12E576D7CCF2AEEC
0119578993E2C5FACD86A7794C35378D9567DC84D5A5F8757967F6E6751737FE
CFC9A4F74A925851953C393C4C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark{restore}if
%%EndFont 
%%BeginFont: Umj10
%!PS-AdobeFont-1.0: Umj10 001.001
%%CreationDate: 22.05.98 at 16:38
%%VMusage: 1024 57716
% Generated by Fontographer 4.1
% AGL compliant glyph names added by script hlatex2agl.pl 2005-Jul-27.
% Copyright \(c\) Un, 1998. All rights reserved.
% ADL: 800 200 0
%%EndComments
FontDirectory/Umj10 known{/Umj10 findfont dup/UniqueID known{dup
/UniqueID get 4040488 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
20 dict begin
/FontInfo 16 dict dup begin
/version (001.001) readonly def
/FullName (Umj10) readonly def
/FamilyName (Umj10) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -133 def
/UnderlineThickness 20 def
/Notice (Copyright \(c\) Un, 1998. All rights reserved.) readonly def
/em 1000 def
/ascent 800 def
/descent 200 def
end readonly def
/FontName /Umj10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /uni1100 put
dup 1 /uni1102 put
dup 2 /uni1103 put
dup 7 /uni110B put
dup 13 /uni1112 put
dup 19 /uni1161 put
dup 20 /uni1163 put
dup 23 /uni1162.18 put
dup 27 /uni1175 put
dup 35 /uni110B.8 put
dup 70 /uni110C.4 put
dup 81 /uni1165.24 put
dup 86 /uni1168.9 put
dup 92 /uni110B.12 put
dup 108 /uni1100.34 put
dup 115 /uni110B.42 put
dup 150 /uni1105.19 put
dup 179 /uni1111.25 put
dup 186 /uni116E.4 put
dup 188 /uni1173.4 put
dup 195 /uni1109.28 put
dup 208 /uni1169.15 put
dup 217 /uni1106.32 put
dup 220 /uni110B.38 put
dup 230 /uni110A.33 put
dup 240 /uni116D.13 put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
/FontBBox{33 -152 1000 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846AB28EDC112EE8CE6C67362AD1C7F635ED7D5931C716DDCCB8DD
0B212BFACD379D8EA98612F6EAED3EE47FC961EB1409CB45E7F58D43059EB7EC
A02477D2E7649FC57A75139DE1A9970727BBBFEEB65485793ECF481C806DE3A5
CED57EFCF4CBC96F3C2B1B59BD1621ECA2BBD67561234721FCE665723408E873
6F108BAE051CF53B602BBFD77E5FCC4351CFBB3E971F03D5EE7A8F611F5B3BF3
6EDBB356365D1D0B64F7191032726C5AE76F0008BFD1CCA161C3DAE4564C8FD4
9BF3F13AF4A3DD33607829AB7322EDC4E8481215002C0E5691E6E48CF2F02837
18625A31B78A151468A0E84A6BA0FBDAFFE6EDCC477CCD13B26C7F1973E7D616
0B0CA5121E768F75CAB017D1D1A9AD8F592668A355160A48ACD36D52603C8A0B
BA3E1C581B5299359035A625E67A77F606AA8FA09E4760D10BEB8A8E279384C4
01A42A97FDAB099B82AAFBADE7665A877E07028A17A0C877E6A71C48C017AE5C
E4A561774CA010EAF4B2B8F9FA7BD0B40EAE1C9C84B0C50525371D2AEDBD9560
9D159664A31DFC79A61FAC1FDDC17E3CDFA5B122892A2A5471106E0183C5243C
98651FBFD059C0B6C767A45C80BD479D6BB179DB83344373439F00B2C5B0AADF
8AF3E1CE74E23570BCAA8F5BC021254EDD9289FA4E230AE401CBEB5F168A81B7
286ABD0F89BD391015722D1AF1B6A8D13F6A0D3E0694949F1BD28A6201A92B2B
37B9D038351C45D637F214F79E1550D2D09A67148321C79D300CAA00A8D58A78
07592321768DDD750D28486FD5FBBAC29CFA9FAECDA8E9AD6BA06E261247BCFA
BBBE5CA1D9462C218F6B0935201D8798D44C69D413715976B3DC275C95EE5F51
F76740FD6A6DDF17178C492F0A6F77B18964D8D5822F2A24CDDA2DFE0259025F
68A13993A905C5AEE2087611FF91BAA3A706ADA6F15C7197EE7CA1D184AE721B
FCB8CACFF80AA6E1DAAA900E8AFE13CDBC0C42EBA2232B8330A9270AA3738764
2D25E0F7F218561723B1A2BDDF4D8CA56836D0B70C2DF06D3C52B7AE9F723BE4
9325F12506B00C3F070D5EEE2B8A825F18D15ADC08189CFD0F0322545CFE3285
AFED2491A8B390E44843EEA66220DA1C93EA63C47EA70931B22D0C351755D7E4
F6C52E36F9632CAA6F88D8C66F32D4796922E29CE7EDF365593F4CB5331C9D2C
1F37F77006662F664A3B6CE9438B8C9F679EB74F7F2034E7F2FFF9758FBA46D7
E8EC567C00A3B6CC4263D9F2D5A5F4859D969961ADD6D1D9CA6B73EEAE2E6611
FA2B9920385876CE72D214A055FDFD9EE6ABF4FF10FB184EBA18EB7E65C7B3DD
D6B212691DEB908A9769545C8EEED6AD7960EC2A71458BECB7A9BB6833FC53A8
C77670EF23EE01DD108FB12D1A2F63B5D993F4345503B65230E0BD14B257B795
5C8B7C156EA881E2B364239477576B11F25B89195698168A23A3E5B1EB9D3E85
F99B919FA965724C57A6B58155C887F45CC734DB53E30303F46F10354BDAECB0
ADC72037BFEE8FC3C831D5F1E11FCC81E8272187817C2D7323620E6E8A8AA098
680ABE8A829A538D16D02ED81C60E0EEFF62D4936045CEC12CF54FF20AEF1181
F8EFBDF30645E7BCC58FA856780E6AECA383D8B4F29A04C44CF97E2F1BC2CDB3
829C64FB47A93CA49BECE6BF1F8DD42F98DE55DFB7AD7FD1D17EEDBF9E2951F6
3FA3A08251200BB7684CDBE6F48D8F4AEDC967E1E80D7558ADEB88AD547288E5
48B53ACCF28346D791798AAF0E77EE9FCE5CE70CC3794EB24B0B6135D2A31370
B170B64A69E347B6DD85A49F65398A635652768954863FB8DA8CF17FBEA716D7
1E501F6B5B902FE07FEB928DE54C4FB466EC048A3C6FEDDE71735E0E656AD2A5
A2FB61A8358CC6E2A65FA042C709C905AC09119AF04D06D9E7D858316A171C4D
8537202B93528B359CB4DD6C0B73E52CA5D654518E3E5783D8B4D53B2ED4BB1A
561041D175D56E4C6F9CD1560539B3FB0D6453A4001087AB0DEAC7C6C54FE2DB
00C1CC132F6421D1A2C53EEC8F99D3AC3D2B0F6814E741B1AB3CD5DB954944E3
8486AD685605AA244F8D24D42B8E8E132AF9B46B020F6160D5510ECB2F14BE25
AE0F08094B4545E5300CBAD5873329B24A275F3B6B94E9BF5AAC1D60910998C3
C0B7D013A5F6258E622AD37EC6178CE17172DD30B874E6337927C413FAC2A270
3716A8985A486AFD10C1EBAB0B463CCC02AF9D8E816419F536DBCEF25F0AAA20
82B5E26387F1FDE5322A9C9E4E69EB6C043EC46ADD74C1F2C4761A2E03CCFE96
1234C531C5AA863BDE1A622ACB5DECF4E36BBA79094C088E584A4CA5B0B05EC3
5756F60F2BD84F870369EA95BFC829E5E6A1A64112D81CE38F7A40E4EC246976
DE70ACD4E252D1283DFB5A2A42C93124661F9C34C328441CF8656FE4710B842A
675E68A1CF1FD320B3345793C3B7313875532D0BD7CB8E3BE04F427550ED84DF
3ACCC59DC693703565F10F7A57357FD9CE1F39719581DCF83BA6F1D6732F69DD
F1CBD92BFFEDAEDA8A223ED289C9546A1CD56C4CFF7BA6935AE4D1638ECD78ED
5A5167D72B82E32D8BBF15040BD08096710D12D83AA29DB5B1FA5E2478ECD449
3E088D77C4C7EC4AF7188DF62A25FB946C75A3A1F22C42F861BE8BE6EE607AC3
FC0AC9CE3A2182119AD784D746EEA9F0277C3615EF4EF84EF3EEF94ECDAA5063
FC916F27C18462B1440626CC2F16C3D10182C348B0E58DD34E1951292C3F7E57
29AB3E2551C8E5AD0B099A7D663CE2A36C79CEC11CE1B660717EE0D0FF6B2988
A5C6B7AF7D200EEC34576A3781BFAED952676CDC78A4D1AFB0DA8EAC892075C9
9D521B000ABAE5F1E5F658B5C1F73B8FCF99E877BC715AE0B16DCF028552C912
58D682B800270900214B0B934E60208A357A5ACA3EACE916E479085D6C3D9019
02BD674D02A2164649A0822A0690AD9C9E0C85B39A492AB65941C2FD930A2961
AB4089D513E294722E1E454908A2E5B7C9F41A19A000FC6BDB3C39F114CAB1D3
940F1D76FFBB39AF4A2A5A486E648321E0EEF0A1A087CDA1BE687490EF7993ED
743EC170E59C8A9EDEA1CFB19530D62303E9BBF55198DF73D003E1CFC3AA3A28
328AD79A31CCEF97216789ADFB9C4D64F50D7D016A2D9533CCBA76A96C50E6E4
E4F520A16FEC6BC543B999B59C7BC1E9E63634FF097BA45A2E473189CE42F940
FC227EDB6D6A38B92A38F2ED1B0EA0A2C573773D7916DEE76879D8009A4962BF
0EE3CD6CE7BECA4DDBD039AD84B3A5FF87E631F2432E435CC9D4A72C66AEC1AD
526EC70EC1398AF58340B48AAEE54FBFBADA3AB0082462203560186C88FFE442
ABF2280E5C84317C6E236260A7A0CDFCCD885DCA47D38E56AD88A37C66FF199B
0629C7406F26EB08EE76D3338AA69E7ABDE020D42AFD8AD5CF5AC9037C674DBD
55F872D681131C4AB399C9C301B7E591CD1C7C0D20238E773FA3C7FF450426A9
39D64AE7D6EB8CB9B96CB124FB40EAEE700F14FDB7A26074B701180B0D28B8BA
BB99682CB85CEC278A760A2FD1492295F9571E79DD5135AECBDFFEF41AAB3AAF
2E4C6F38AD033F3308A3177CDB0568221A93B92F79356F7823A4A363F330A4C3
DA2A20615A430105FC985A13A3E6BE48094248F45A55EC305286CE4F06814136
20C3F93EB5E28583D7E4F279D5D037075F14226D02B17DA6CADEC8F044AEBBE9
DAFB6831E7DD9A2F7A7C42EAA1B5FC0B565CC6BF64399050518B4698930E4E91
D311DBD796BAEB284248AE684CF0F9DCBFC45F7475F877209CAA73C402B077FF
AD66EF77680DDE184A6CD19E917D2633C1DAD0D7105FC6F5CC88141778F1935A
1087DEF8BA87B7ACE5049D45BAE273DF850CD09F377E55608283753ED353D82D
05979E643A525BABB8438DCBDD15DF355D15492AA4CFDBD0670F0AF6767ACAC7
1020A70BA8AB7FA76584C36A153EE207170CA1ED87CA8783AF40AC8286137AF4
3E5875AB762EB4758637DB5DCBA8224535E38C1FAA3A22544BB4C1E0EDDAA9F8
1AB4E41DC536373B2D80FFF02CAF5B0B12A52E1C0805CC4ABC353B24F29B4C31
38561E9A52C55E97C518F5F7D90A4DE0EA6E091A617D834346F064C1D82B984B
697844C3BD295A69C0A44F15F126B039CBE637EF39CAFD5D4F71EDD9304D6B0E
DEB72FFB5BB9FED9A568414FABEA79BED5F19DD5F903AF12956850B6A221F0EA
FE9AD88A2490A3810CC311AC20257E08E71DF8103A8E297545094B47ADDD9F66
15859D9D8FB0079146DAE07901EE175A9901B7C0FD371D1B1522D6E5CF6B41B4
1DCE64358B8E8CA13A33B77CA01D8192D3617041CFD627FC5108B514D2BC1465
6B08CA03F775685D1F24B66B8009D591A0391AC87662BCB47C6BEB38FD8D39AE
C655F36DA2F0C16E1E4308E0110DA5CD249E0FEEC72ACF7A51B44583F22C0453
1B89D35C673FA222030747FFA94FFDDB3D928726AF0E60C184F92D10BF4AF2F4
4443FDF62A9217066F3595E0A8E6F5F2AAAB726794B27DF8A853F27C3C734680
51FEEB9E66B9CEA545A4EB2BF1E58297FD5534A801427D987E9C590C15C9A9ED
E5142E121FB6600B7A0A34930D6779AE1C1FA4865D63A7FE7951B69F1545A48C
1CC83D38C1A1FAE76FE5B8992A2F16F40856C34C614992FE78E65E2AF803C5DE
5384AEF8B63BE8BC278606889A6AA2D3932627A0981077AFC20A9D339E1B6066
E210C1285D853AF116946A6C579A6A10C26C862F0F6503E6858C4A30641B88CD
5108DCA8CA508FD1B600950000497A09B7B067CA5E125F75A470E8C4ED82E8A5
B4A81A6ABF9DBAE63080F999B68DA951398B564D93B31318506530960572C8B9
82297E6072D21DBC7D9630A1C876077CDD892CA3E8712DA72B54F5CBD9DB6619
03BB645127D9ADEBF94D064B9B6DC3F93963113C16C3B6A8A54B972CEF6083B5
DBD1FBDCCB1E0559F324EA749455CF08B0B6D2DC3F29C9B918BE8C115665544E
D884DA4034CF55536886F2FFF0F45AA0F998F6E8844AA075439ED316424A060D
6E6B4BDD8DDAE50695FD089F96ADFA46B033DDA3D6DF570879EAF5F1EEB23ACE
94804CAE8BBB461B9680243823DF38BC893BC8747E1742969E797737394BD26A
2B7FF3EF7B938C6AF68A1103555151F13C7C4214F5D2C820D80BA6117A81DCC6
0B01EB2D1A86C8B1378D13215C1FAB50E7A9137BE2227C58FE2266F0C5013EF3
56F5670AC56F36898099C2D87A32D7EB93378162DB64C33BFFC0390DA5CFEE9E
0CFA914DA02B5095B1EA8C57AEBF9E79C678CF972BC8998EBF03FAD319FDB179
F1B4287898CA1DF7BFF97F8DD5CA7BB94995B586B5C4E0243DDF49D848B662A6
558E06ED848F08EC4DB5678B0F3E6099C30F89D600EF1CFA668F29F92B7CD66D
FF73AC35FA535172C6737453164828305FCD8EEB8AE5E222B5C87DE1D975B03A
111FAFEFCC705EC434D65856C569FA9BE1C06D76BEC2028C2ABD3DB0B66B37F3
231F5234B10B366D688BED419370B4E175699F086F0533ECAF31E465C084F58C
09C5B60820F8EC1A323521C3A7F105DA2427F98B4DD230F01AF5B622927C390C
750C0E6B3C09758FA7758737EE38B024C084D7E02195ED3A960EE77C5F767C34
0B8AFBF40D3074FB18967C23213115B24101CF5235CF67B5DB3192E680C542D1
0B8BDEB850263F96CC601D7ED44627B4BD567369CA940BDBB322E04AAF9F92DC
4D6839782074202F95614B4EF28BB6DE2A8718BD9978A0530432350E3CECB28F
D0EC6302AB0D84293EE975466BD03D7838F25796FE920A42C2A0C18A5D09AD31
324C10503672ACA1844FC1D0B0655FAF3BBA1118E9C308AD727897AD8E2FE8FF
AF16FDC97CEE60AAC391AF163FBEFB8594490D5EAFA7C0073906806517BA896E
9A181FD198C0D341338A2387EE51524CC32D40D4C1A8127A313EDEBEAEB36CF5
4F5F548256AB9F765F665685FD982FED33ED11C4D25D8A07C757A76D96D5AE87
7486F04F036A3C8FDDE870F54843ED31D3D6B1F7CCDEBFDDA9ADDF37B4BF475A
71374F227EC6B58B12252470AE7D17DE6E3EAB0DDA5D22196D76AD90851977B4
56468A1921EE4D3F86CA20FFCD4B6760F9FB267C61F937294DCD5BDF4A573E52
74D3A3C9B8088E814FE3B240B97624C19C25B0159AB46C763D99B183468C073E
28D0C99F8E0D336C5AB4D0CFB8674EF6F422079F7FFD6F1D85A80BF7524459FA
7398187DB86C8A5DA1DDC7B753527F0D294ED88BD45487F0FBAE944F2F414D64
47F9E42BCCBECDA0EB75B8A155BFFCD05BE5B12A2BA4F1B924D4CBA4732B46D3
1BD3B0E396A1B792A5A30B7868E618CCB41A531D0C3CF162CF14B5E5491A31AB
863DCB4AFBCC7A7C3D99C243C5BEC20455582B8BB6A9A8119E5536E5657007B1
534A39A7697F78D0EED01EB3DE7EA8FC69784B33E68AD37FC124D06CC3FEFCDA
E9DA6F4C942B9CF6AC2F3C09BDF143D5BDC203C95E84FF67FE6546F068910D5E
2DC21F6CFB0289416A5A78169ADCA1652A5D0B51CD1F827D260D425A44DE13BE
BF3CF60F47570A348F770A932189C6F5D00DAA8C6FB961429B5E9464619943FB
12A0C5504112F8D1398CF37010EE37798E73FA99D6F767323EB20A44756780B1
ABC40110C6D79B725EA03D398A581B6E07CB3E2053B5F933AFF7B0062CDD3B9B
A1386F4E08836F8CCA8719F8A199EBA21E1C34DE472CC1D16F3971D7AC8ED3B5
FACF2413CAE838DF4C60AA0AB5A8FCA8ADB9B619C287475B6A321B3C8D1E4067
612539A6342D5C012B132CC73B4B6B326FD6E0F5DD4A2F9E9129F2605D25646A
A181BA6ADC23C5163350787748BAD2DC7DFFA3CE79D0E6BC67615C7C4E84B398
6CE79AE697DF6758828C7DA82450E481D71DAC5FEE4CADCA28383282B261D781
5AFECD160E29CC0740277B8613133448E90B2FCFAFF8469EB412BA172E3F5B5D
986A07C4AEC0DDEC663BEBB1812AF2D14FF0E5F598AFEA0E733F08D13B2B854C
8A716CC453396EE8754C089CE52BD2987E198F634CF53176382490979E46F43D
565AE4C7612304F5E65D69B0964FBCA9085BAD4501E85E0BD986234262564C59
4CD37416AC06E53CF208EDDB1B5DEA54A9EA8FF04A3626D6B638FBF2CA990B45
8A7BD2F1800B12456C98F4537A4A93233FDB56FBDA5E93551306E46277FF8031
543BC615209072FFC88567ADC7956EDFDC9830424FB9C99752E390DD286CC3CC
B3C85D3C07CD07BED54D858AA511D52B2A21F61056657AF33B4E53AF8D045CC5
200E1A96F6BB9FB2EBAFA623AB803FF741886F24D5DF2A2F39C2C98BF899D12F
1284E39A209133F8D9664C6C2217D0F5CF033BCDC618C8D0A87FB085969418FA
EDEAEA8A6B749DC89A000DB689233E7A2EE0888831119FA16E16E017DABD9300
1EC657851F67AE0D6A429A67E9F82C0BE511693BEE301E14CD238D7A6B7B456F
064CC01672E9CE6FE99631C330274DEE8AD1212388A33C35491011848C403D79
2BBECF451C5082A4F3D8885CDCBC693D55637FE8B8421E682A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark{restore}if
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (ktree.dvi)
@start /Fa 209[25 46[{}1 74.7198 /CMBX9 rf /Fb 128[38
3[38 34 2[55 41 43 30 30 30 1[43 38 43 64 21 41 1[21
43 38 23 34 43 34 43 38 9[79 1[58 6[58 1[48 60 4[50 52
59 2[58 20[21 2[30 30 14[38 25[{}37 74.7198 /CMR9 rf
/Fc 128[42 3[42 37 2[60 44 46 32 33 33 1[46 42 46 69
23 44 1[23 46 42 25 37 46 37 46 42 9[85 1[62 6[62 1[52
65 4[54 57 63 2[62 18[23 28 23 18[42 25[{}37 83.022 /CMR10
rf /Fd 232[83 7[83 15[{}2 83.022 /Umj15 rf /Fe 1[83 1[83
16[83 5[83 15[83 11[83 36[83 83 15[83 5[83 20[83 1[83
1[83 1[83 1[83 16[83 20[83 1[83 16[83 6[83 83 8[83 38[{}22
83.022 /Umj14 rf /Ff 13[83 66[83 15[83 98[83 20[83 39[{}5
83.022 /Umj13 rf /Fg 57[83 7[83 10[83 9[83 1[83 9[83
19[83 31[83 83 51[83 13[83 83 6[83 19[83 83 5[83 3[{}16
83.022 /Umj12 rf /Fh 44[83 54[83 21[83 6[83 31[83 80[83
14[{}6 83.022 /Umj11 rf /Fi 15[83 9[83 9[83 2[83 8[83
12[83 6[83 1[83 6[83 28[83 34[83 6[83 15[83 5[83 4[83
10[83 34[83 7[83 3[83 2[83 83 5[83 5[83 4[83 83 83{}26
83.022 /Umj10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 515 440 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def

515 440 a 515 440 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 515 440 a 515 440 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 515 440 a 0 TeXcolorgray
515 440 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 515 440 a 0 TeXcolorgray 0 TeXcolorgray 1706
-73 a
tx@Dict begin { 0.0 -8.39996 } PutCoor PutBegin  end
 1706 -73 a -42 w Fe(7)-83 b(\243)g(\244)1706 -73
y
tx@Dict begin  PutEnd  end
 1706 -73 a 1706 -73 a
tx@Dict begin { 0.0 -28.90689 } PutCoor PutBegin  end
 1706 -73 a -55 w Fc(-)p Fi(\001)g(\023)1706
-73 y
tx@Dict begin  PutEnd  end
 1706 -73 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-59.99982 -58.507 0.0 -13.50696    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1706 -73 a
tx@Dict begin { -59.99982 -58.507 } PutCoor PutBegin  end
 1706 -73 a 1706 -73 a
tx@Dict begin  PutEnd  end
 1706 -73 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.99994 -28.50697 0.0 -13.50696    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1706 -73 a
tx@Dict begin { 19.99994 -28.50697 } PutCoor PutBegin  end
 1706 -73 a 1706 -73
a
tx@Dict begin  PutEnd  end
 1706 -73 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-79.99976 -73.50702 -59.99982 -58.507    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1706
-73 a
tx@Dict begin { -79.99976 -73.50702 } PutCoor PutBegin  end
 1706 -73 a 1706 -73 a
tx@Dict begin  PutEnd  end
 1706 -73 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-39.99988 -73.50702 -59.99982 -58.507    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1706 -73 a
tx@Dict begin { -39.99988 -83.41394 } PutCoor PutBegin  end
 1706 -73 a -150 w
Fi(\000)g(\023)p Fe(0)g(p)g(x)p Fi(\015)g(\023)p Fc(-,)1706
-73 y
tx@Dict begin  PutEnd  end
 1706 -73 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-99.9997 -88.50703 -79.99976 -73.50702    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1706 -73 a
tx@Dict begin { -99.9997 -98.41396 } PutCoor PutBegin  end
 1706 -73 a -166 w Fh(\206)g Ff(<)g Fg(\306)p
Fe(_)g(\376)g(v)p Fi(\334)g(\274\226)g(\320)1706 -73
y
tx@Dict begin  PutEnd  end
 1706 -73 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-59.99982 -88.50703 -79.99976 -73.50702    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-79.99976 -103.50705 -59.99982 -88.50703    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1706 -73 a
tx@Dict begin { -79.99976 -113.41397 } PutCoor PutBegin  end
 1706 -73 a -291 w
Fi(\303)g(\272)p Ff(')g(\237)g Fg(\235)p Fe(0)g(p)g(x)p
Fg(\247)g(4)g(\003)p Fh(_)g(\016)1706 -73 y
tx@Dict begin  PutEnd  end
 1706 -73
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-39.99988 -103.50705 -59.99982 -88.50703    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1706 -73 a
tx@Dict begin { -39.99988 -113.41397 } PutCoor PutBegin  end
 1706
-73 a -125 w Fh(\206)g Fg(\276)g Fh(\323\177)g Fg(\251)g
Fh(\234)p Fi(s)g(\033)1706 -73 y
tx@Dict begin  PutEnd  end
 1706 -73 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -43.50699 19.99994 -28.50697    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1706 -73 a
tx@Dict begin { 0.0 -53.41391 } PutCoor PutBegin  end
 1706 -73 a -125 w
Fe(\353)g Fd(\027)g Fe(H)p Fh(\206)g Ff(<)g Fg(\306)p
Fe(\223)g(\311)g(r)1706 -73 y
tx@Dict begin  PutEnd  end
 1706 -73 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
39.99988 -43.50699 19.99994 -28.50697    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.99994 -58.507 39.99988 -43.50699    /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1706 -73 a
tx@Dict begin { 19.99994 -58.507 } PutCoor PutBegin  end
 1706 -73 a 1706 -73 a
tx@Dict begin  PutEnd  end
 1706 -73 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
119.99963 -103.50705 39.99988 -43.50699    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
99.9997 -118.50706 119.99963 -103.50705    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1706 -73 a
tx@Dict begin { 99.9997 -128.41399 } PutCoor PutBegin  end
 1706 -73 a -648 w Fe(\353)g Fd(\027)g Fe(H)p
Fh(\206)g Ff(<)g Fg(\306&)g(h)g(\003)p Fc(,)28 b Fi(\\)-83
b(V)p Fe(\325)g(\374)g(t)p Fg(&)g(h)g(\003)p Fi(s)g(\033#)g(Q\007)g
(\024)1706 -73 y
tx@Dict begin  PutEnd  end
 1706 -73 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
139.99957 -118.50706 119.99963 -103.50705    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
119.99963 -133.50708 139.99957 -118.50706    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1706
-73 a
tx@Dict begin { 119.99963 -143.414 } PutCoor PutBegin  end
 1706 -73 a -83 w Fi(\015)g(\023)p Fe(\215)g Fd(\017)g
Fe(H)1706 -73 y
tx@Dict begin  PutEnd  end
 1706 -73 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
159.99951 -133.50708 139.99957 -118.50706    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 1706 -73 a
tx@Dict begin { 159.99951 -143.414 } PutCoor PutBegin  end
 1706 -73 a -136 w Fg(\036)g Ff(\257)g
Fg(\011)p Fi(s)g(\033\002)g(\023)p Fc(.)1706 -73 y
tx@Dict begin  PutEnd  end
 1706
-73 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -73.50702 19.99994 -58.507    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1706 -73
a
tx@Dict begin { 0.0 -73.50702 } PutCoor PutBegin  end
 1706 -73 a 1706 -73 a
tx@Dict begin  PutEnd  end
 1706 -73 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
59.99982 -88.50703 19.99994 -58.507    /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
39.99988 -103.50705 59.99982 -88.50703    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1706
-73 a
tx@Dict begin { 39.99988 -113.41397 } PutCoor PutBegin  end
 1706 -73 a -291 w Fi(F)g(\027\263)g(\360)p Fg(\211)g
Fe(&)g Fg(\263)p Fh(_)g(\016)1706 -73 y
tx@Dict begin  PutEnd  end
 1706 -73 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
79.99976 -103.50705 59.99982 -88.50703    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1706 -73 a
tx@Dict begin { 79.99976 -113.41397 } PutCoor PutBegin  end
 1706 -73 a -166 w
Fe(/)g(\345)g(J)p Fi(\346)g(\274l)g(\033\000)g(\023)1706
-73 y
tx@Dict begin  PutEnd  end
 1706 -73 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-19.99994 -88.50703 0.0 -73.50702    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1706 -73 a
tx@Dict begin { -19.99994 -98.41396 } PutCoor PutBegin  end
 1706 -73 a -166 w Fi(\\)g(V)p Fe(\325)g(\374)g(t)p
Fh(_)g(\016)1706 -73 y
tx@Dict begin  PutEnd  end
 1706 -73 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.99994 -88.50703 0.0 -73.50702    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end


@endspecial 1706 -73 a
tx@Dict begin { 19.99994 -98.41396 } PutCoor PutBegin  end
 1706 -73 a -208 w Fg(\045)g Ff(\362)g
Fg(\012\045)g(i)g(\003)p Fi(s)g(\033\331)g(\274\226)g(\320)1706
-73 y
tx@Dict begin  PutEnd  end
 1706 -73 a 515 1316 a Fe(7)g(\243)g(\244)30 b Fh(\206)-83
b Ff(<)g Fg(\306)q Fe(_)g(\376)g(v)q Fi(\334)g(\274)q(\226)g(\320)31
b(\303)-83 b(\272)q Ff(')g(\237)g Fg(\235)q Fe(0)g(p)g(x)q
Fg(\247)g(4)g(\003)q Fh(_)g(\016)31 b(\206)-83 b Fg(\276)g
Fh(\323)q(\177)g Fg(\251)g Fh(\234)q Fi(s)g(\033)30 b(\000)-83
b(\023)q Fe(0)g(p)g(x)q Fi(\015)g(\023)q(\001)g(\023)p
Fc(,)31 b Fe(\353)-83 b Fd(\027)g Fe(H)q Fh(\206)g Ff(<)g
Fg(\306)q Fe(\223)g(\311)g(r)31 b Fi(\\)-83 b(V)q Fe(\325)g(\374)g(t)q
Fh(_)g(\016)30 b Fg(\045)-83 b Ff(\362)g Fg(\012)q(\045)g(i)g(\003)q
Fi(s)g(\033)q(\331)g(\274)q(\226)g(\320)31 b(F)-83 b(\027)q(\263)g
(\360)q Fg(\211)g Fe(&)g Fg(\263)515 1407 y Fh(_)g(\016)27
b Fe(/)-83 b(\345)g(J)p Fi(\346)g(\274l)g(\033\000)g(\023)28
b Fe(\353)-83 b Fd(\027)g Fe(H)p Fh(\206)g Ff(<)g Fg(\306&)g(h)g(\003)p
Fc(,)28 b Fi(\\)-83 b(V)p Fe(\325)g(\374)g(t)p Fg(&)g(h)g(\003)p
Fi(s)g(\033#)g(Q\007)g(\024)28 b(\015)-83 b(\023)p Fe(\215)g
Fd(\017)g Fe(H)28 b Fg(\036)-83 b Ff(\257)g Fg(\011)p
Fi(s)g(\033\002)g(\023)p Fc(.)1574 1684 y
tx@Dict begin { 0.0 -7.69997 } PutCoor PutBegin  end
 1574 1684 a
-254 w Fb(Das)26 b(hei\031t,)g(dass)1574 1684 y
tx@Dict begin  PutEnd  end
 1574
1684 a 1574 1684 a
tx@Dict begin { 0.0 -28.06943 } PutCoor PutBegin  end
 1574 1684 a -106 w Fb({)g(ab)r(er)1574
1684 y
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-74.00427 -68.00659 0.0 -12.50696    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1574 1684 a
tx@Dict begin { -74.00427 -68.00659 } PutCoor PutBegin  end
 1574 1684 a 1574 1684 a
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
18.50107 -26.38187 0.0 -12.50696    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1574 1684 a
tx@Dict begin { 18.50107 -26.38187 } PutCoor PutBegin  end
 1574 1684 a 1574
1684 a
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-129.50748 -109.63132 -74.00427 -68.00659    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1574 1684 a
tx@Dict begin { -129.50748 -109.63132 } PutCoor PutBegin  end
 1574 1684 a 1574 1684 a
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-55.5032 -81.8815 -74.00427 -68.00659    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1574 1684 a
tx@Dict begin { -55.5032 -81.8815 } PutCoor PutBegin  end
 1574 1684 a 1574
1684 a
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-148.00854 -123.50623 -129.50748 -109.63132    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1574 1684 a
tx@Dict begin { -148.00854 -132.71315 } PutCoor PutBegin  end
 1574 1684 a -71 w Fb(es)1574 1684 y
tx@Dict begin  PutEnd  end
 1574
1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-111.00641 -123.50623 -129.50748 -109.63132    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-129.50748 -137.38113 -111.00641 -123.50623    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1574 1684 a
tx@Dict begin { -129.50748 -146.58806 } PutCoor PutBegin  end
 1574 1684 a -116
w Fb(zw)n(ar)1574 1684 y
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-92.50534 -137.38113 -111.00641 -123.50623    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-111.00641 -151.25604 -92.50534 -137.38113    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1574
1684 a
tx@Dict begin { -111.00641 -160.46297 } PutCoor PutBegin  end
 1574 1684 a -129 w Fb(m\177)-38 b(oglic)n(h)1574
1684 y
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-74.00427 -151.25604 -92.50534 -137.38113    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1574 1684 a
tx@Dict begin { -74.00427 -160.46297 } PutCoor PutBegin  end
 1574 1684 a -13 w Fb(ist,)1574 1684 y
tx@Dict begin  PutEnd  end
 1574
1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-74.00427 -95.75641 -55.5032 -81.8815    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1574 1684
a
tx@Dict begin { -74.00427 -104.96333 } PutCoor PutBegin  end
 1574 1684 a -262 w Fb(das)26 b(Niv)n(eau)1574 1684
y
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-37.00214 -95.75641 -55.5032 -81.8815    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-55.5032 -109.63132 -37.00214 -95.75641    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1574 1684 a
tx@Dict begin { -55.5032 -126.63828 } PutCoor PutBegin  end
 1574
1684 a 1155 1607 a Fb(\177)-41 b(ub)r(ersetzerisc)n(her)1221
1684 y(F)-6 b(ertigk)n(eiten)1574 1684 y
tx@Dict begin  PutEnd  end
 1574 1684 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-18.50107 -109.63132 -37.00214 -95.75641    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-37.00214 -123.50623 -18.50107 -109.63132    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1574 1684 a
tx@Dict begin { -37.00214 -140.51318 } PutCoor PutBegin  end
 1574 1684 a 1479
1607 a Fb(durc)n(h)1411 1684 y(Ein)r(\177)-41 b(ubung)1574
1684 y
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -123.50623 -18.50107 -109.63132    /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1574 1684 a
tx@Dict begin { 0.0 -132.71315 } PutCoor PutBegin  end
 1574 1684 a -100 w Fb(zu)25 b(erh\177)-38
b(ohen)25 b({)1574 1684 y
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -40.25677 18.50107 -26.38187    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end


@endspecial 1574 1684 a
tx@Dict begin { 0.0 -40.25677 } PutCoor PutBegin  end
 1574 1684 a 1574 1684 a
tx@Dict begin  PutEnd  end
 1574
1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
92.50534 -81.8815 18.50107 -26.38187    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
74.00427 -95.75641 92.50534 -81.8815    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1574 1684 a
tx@Dict begin { 74.00427 -112.76337 } PutCoor PutBegin  end
 1574 1684 a 1410
1607 a Fb(sollte)i(sic)n(h)1518 1684 y(das)1574 1684
y
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
111.00641 -95.75641 92.50534 -81.8815    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
92.50534 -109.63132 111.00641 -95.75641    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1574 1684 a
tx@Dict begin { 92.50534 -109.63132 } PutCoor PutBegin  end
 1574
1684 a 1574 1684 a
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
185.01068 -151.25604 111.00641 -95.75641    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
166.50961 -165.13095 185.01068 -151.25604    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1574
1684 a
tx@Dict begin { 166.50961 -174.33788 } PutCoor PutBegin  end
 1574 1684 a -301 w Fb(widerspiegeln)1574 1684
y
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
203.51175 -165.13095 185.01068 -151.25604    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
166.50961 -192.88077 203.51175 -165.13095    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1574 1684 a
tx@Dict begin { 166.50961 -192.88077 } PutCoor PutBegin  end
 1574
1684 a 1574 1684 a
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
222.01282 -179.00586 203.51175 -165.13095    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 1574 1684 a
tx@Dict begin { 222.01282 -188.21278 } PutCoor PutBegin  end
 1574 1684 a 71 w Fa(.)1574 1684
y
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
-18.50107 -54.13168 0.0 -40.25677    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1574 1684 a
tx@Dict begin { -18.50107 -63.33861 } PutCoor PutBegin  end
 1574 1684 a -79 w Fb(da)1574 1684 y
tx@Dict begin  PutEnd  end
 1574
1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
18.50107 -54.13168 0.0 -40.25677    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -68.00659 18.50107 -54.13168    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1574 1684 a
tx@Dict begin { 0.0 -77.21352 } PutCoor PutBegin  end
 1574 1684 a -291
w Fb(die)f(Literatur)1574 1684 y
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
37.00214 -68.00659 18.50107 -54.13168    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
18.50107 -81.8815 37.00214 -68.00659    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1574 1684 a
tx@Dict begin { 18.50107 -98.6603 } PutCoor PutBegin  end
 1574 1684 a 1508 1607 a Fb(eine)1393 1684
y(Kunstform)1574 1684 y
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
55.5032 -81.8815 37.00214 -68.00659    /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 1574 1684 a
tx@Dict begin { 55.5032 -91.08842 } PutCoor PutBegin  end
 1574 1684 a -13 w Fb(ist,)1574
1684 y
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
74.00427 -123.50623 92.50534 -109.63132    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1574 1684 a
tx@Dict begin { 74.00427 -132.71315 } PutCoor PutBegin  end
 1574 1684 a -181 w Fb(in)f(den)1574 1684
y
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
111.00641 -123.50623 92.50534 -109.63132    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
92.50534 -137.38113 111.00641 -123.50623    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1574 1684 a
tx@Dict begin { 92.50534 -153.65991 } PutCoor PutBegin  end
 1574
1684 a 1218 1613 a Fb(sc)n(hriftlic)n(hen)1112 1665 y(\177)1102
1684 y(Ub)r(ertragungen)h(der)1574 1684 y
tx@Dict begin  PutEnd  end
 1574 1684 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
129.50748 -137.38113 111.00641 -123.50623    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1574 1684 a
tx@Dict begin  tx@NodeDict begin {129.50748 -137.38113 } false /N@X:t
10 {InitPnode } /NodeScale {} def NewNode end  end
 1574
1684 a 1574 1684 a
tx@Dict begin { 129.50748 -146.58806 } PutCoor PutBegin  end
 1574 1684 a 1284 1684 a
tx@Dict begin  tx@NodeDict begin {7.69997 3.30003 69.9627 34.98135
2.19997 } false /N@X 16 {InitRnode } /NodeScale {} def NewNode end
 end
 1284 1684
a 230 w Fb(Ausdr)r(\177)-41 b(uc)n(k)n(e)1574 1684 y
tx@Dict begin  PutEnd  end

1574 1684 a 1574 1684 a
tx@Dict begin  tx@NodeDict begin {129.50748 -151.39505 } false /N@X:b
10 {InitPnode } /NodeScale {} def NewNode end  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
148.00854 -206.75568 166.50961 -192.88077    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 1574 1684 a
tx@Dict begin  tx@NodeDict begin {148.00854 -206.75568 } false /N@Y:t
10 {InitPnode } /NodeScale {} def NewNode end  end
 1574 1684 a 1574 1684 a
tx@Dict begin { 148.00854 -215.9626 } PutCoor PutBegin  end
 1574
1684 a 1463 1684 a
tx@Dict begin  tx@NodeDict begin {7.69997 3.30003 26.72551 13.36275
2.19997 } false /N@Y 16 {InitRnode } /NodeScale {} def NewNode end
 end
 1463 1684 a Fb(,)26 b(die)1574 1684
y
tx@Dict begin  PutEnd  end
 1574 1684 a 1574 1684 a
tx@Dict begin  tx@NodeDict begin {148.00854 -220.76959 } false /N@Y:b
10 {InitPnode } /NodeScale {} def NewNode end  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
185.01068 -206.75568 166.50961 -192.88077    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
166.50961 -220.63058 185.01068 -206.75568    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1574
1684 a
tx@Dict begin { 166.50961 -229.83751 } PutCoor PutBegin  end
 1574 1684 a -98 w Fb(v)n(on)1574 1684 y
tx@Dict begin  PutEnd  end
 1574 1684
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
203.51175 -220.63058 185.01068 -206.75568    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
166.50961 -248.3804 203.51175 -220.63058    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1574 1684 a
tx@Dict begin { 166.50961 -248.3804 } PutCoor PutBegin  end
 1574 1684 a 1574
1684 a
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
222.01282 -234.5055 203.51175 -220.63058    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
203.51175 -248.3804 222.01282 -234.5055    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1574 1684 a
tx@Dict begin { 203.51175 -257.58733 } PutCoor PutBegin  end
 1574
1684 a -122 w Fb(W)-6 b(ert)1574 1684 y
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
240.51389 -248.3804 222.01282 -234.5055    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1574 1684 a
tx@Dict begin { 240.51389 -257.58733 } PutCoor PutBegin  end
 1574 1684 a -201
w Fb(sein)26 b(m)r(\177)-41 b(ussen\(,\))1574 1684 y
tx@Dict begin  PutEnd  end

1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
148.00854 -262.25531 166.50961 -248.3804    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1574
1684 a
tx@Dict begin { 148.00854 -273.2968 } PutCoor PutBegin  end
 1574 1684 a -292 w Fb(literarisc)n(hem)1574 1684
y
tx@Dict begin  PutEnd  end
 1574 1684 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
185.01068 -262.25531 166.50961 -248.3804    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1574 1684 a
tx@Dict begin { 185.01068 -279.26227 } PutCoor PutBegin  end
 1574 1684 a 1510 1607 a Fb(und)1480 1684
y(k)r(\177)g(unstlerisc)n(hem)1574 1684 y
tx@Dict begin  PutEnd  end
 1574 1684 a
1574 1684 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.5 4.30554 0.   1. .setopacityalpha  Arrow
 EndArrow  } def  0.51663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.5 4.30554 0.   1. .setopacityalpha
 Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg
0.0 0.0 0 0 /N@Y /N@X InitNC { /AngleA 235.  def /AngleB 260.  def
0.67  0.67  NCCurve  } if end  gsave 0.51663 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  5.0  3.0  0.0  0.0 ] -2 0 add  DashLine  grestore
 grestore end
 1574 1684 a 515 4227 a Fc(Das)35 b(hei\031t,)j(dass)d(es)g
(zw)n(ar)g(m\177)-42 b(oglic)n(h)34 b(ist,)k(das)e(Niv)n(eau)h(\177)-44
b(ub)r(ersetzerisc)n(her)34 b(F)-7 b(ertigk)n(eiten)515
4327 y(durc)n(h)31 b(Ein)r(\177)-44 b(ubung)31 b(zu)h(erh\177)-42
b(ohen)30 b({)i(ab)r(er)f(da)g(die)g(Literatur)g(eine)h(Kunstform)f
(ist,)h(sollte)515 4426 y(sic)n(h)j(das)f(in)i(den)f(sc)n(hriftlic)n
(hen)1593 4405 y(\177)1583 4426 y(Ub)r(ertragungen)f(der)h(Ausdr)r
(\177)-44 b(uc)n(k)n(e)34 b(widerspiegeln,)i(die)515
4526 y(v)n(on)27 b(literarisc)n(hem)f(und)i(k)r(\177)-44
b(unstlerisc)n(hem)27 b(W)-7 b(ert)27 b(sein)h(m)r(\177)-44
b(ussen.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
